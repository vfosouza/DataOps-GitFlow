// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package data_ops.curated_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: CURATED Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class CURATED implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CURATED";
	private final String projectName = "DATA_OPS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CURATED.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CURATED.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDA_VENDEDORESStruct implements routines.system.IPersistableRow<SAIDA_VENDEDORESStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDA_VENDEDORESStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDAStruct implements routines.system.IPersistableRow<SAIDAStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class VENDEDORStruct implements routines.system.IPersistableRow<VENDEDORStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.CountryRegion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+OrderDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(VENDEDORStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String SalesOrderID;

				public String getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public String BillToAddressID;

				public String getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.SalesOrderID = readString(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readString(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
					this.BillToAddressID = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// String
				
						writeString(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+SalesOrderID);
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+OrderDate);
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+BillToAddressID);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public String SalesOrderID;

				public String getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public String BillToAddressID;

				public String getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.SalesOrderID = readString(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readString(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
					this.BillToAddressID = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// String
				
						writeString(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+SalesOrderID);
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+OrderDate);
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+BillToAddressID);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);
		tFileInputDelimited_3Process(globalMap);

		row1Struct row1 = new row1Struct();
SAIDAStruct SAIDA = new SAIDAStruct();
row3Struct row3 = new row3Struct();
VENDEDORStruct VENDEDOR = new VENDEDORStruct();
SAIDA_VENDEDORESStruct SAIDA_VENDEDORES = new SAIDA_VENDEDORESStruct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String OrderDate;
    				String OnlineOrderFlag;
    				String CountryRegion;BigDecimal TotalDue_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.OrderDate == null) ? 0 : this.OrderDate.hashCode());
							
							result = prime * result + ((this.OnlineOrderFlag == null) ? 0 : this.OnlineOrderFlag.hashCode());
							
							result = prime * result + ((this.CountryRegion == null) ? 0 : this.CountryRegion.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.OrderDate == null) {
								if (other.OrderDate != null) 
									return false;
							} else if (!this.OrderDate.equals(other.OrderDate)) 
								return false;
						
							if (this.OnlineOrderFlag == null) {
								if (other.OnlineOrderFlag != null) 
									return false;
							} else if (!this.OnlineOrderFlag.equals(other.OnlineOrderFlag)) 
								return false;
						
							if (this.CountryRegion == null) {
								if (other.CountryRegion != null) 
									return false;
							} else if (!this.CountryRegion.equals(other.CountryRegion)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA_VENDEDORES");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String OrderDate;
    				String OnlineOrderFlag;
    				String CountryRegion;
    				String SalesPerson;BigDecimal TotalDue_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.OrderDate == null) ? 0 : this.OrderDate.hashCode());
							
							result = prime * result + ((this.OnlineOrderFlag == null) ? 0 : this.OnlineOrderFlag.hashCode());
							
							result = prime * result + ((this.CountryRegion == null) ? 0 : this.CountryRegion.hashCode());
							
							result = prime * result + ((this.SalesPerson == null) ? 0 : this.SalesPerson.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.OrderDate == null) {
								if (other.OrderDate != null) 
									return false;
							} else if (!this.OrderDate.equals(other.OrderDate)) 
								return false;
						
							if (this.OnlineOrderFlag == null) {
								if (other.OnlineOrderFlag != null) 
									return false;
							} else if (!this.OnlineOrderFlag.equals(other.OnlineOrderFlag)) 
								return false;
						
							if (this.CountryRegion == null) {
								if (other.CountryRegion != null) 
									return false;
							} else if (!this.CountryRegion.equals(other.CountryRegion)) 
								return false;
						
							if (this.SalesPerson == null) {
								if (other.SalesPerson != null) 
									return false;
							} else if (!this.SalesPerson.equals(other.SalesPerson)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"VENDEDOR");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDA_VENDEDORESStruct SAIDA_VENDEDORES_tmp = new SAIDA_VENDEDORESStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDAStruct SAIDA_tmp = new SAIDAStruct();
VENDEDORStruct VENDEDOR_tmp = new VENDEDORStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */"D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS.CSV"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"US-ASCII")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"US-ASCII")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.SalesOrderID = null;
					
							row1.RevisionNumber = null;
					
							row1.OrderDate = null;
					
							row1.DueDate = null;
					
							row1.OnlineOrderFlag = null;
					
							row1.ShipDate = null;
					
							row1.Status = null;
					
							row1.SalesOrderNumber = null;
					
							row1.CustomerID = null;
					
							row1.ShipToAddressID = null;
					
							row1.BillToAddressID = null;
					
							row1.ShipMethod = null;
					
							row1.CreditCardApprovalCode = null;
					
							row1.SubTotal = null;
					
							row1.TaxAmt = null;
					
							row1.Freight = null;
					
							row1.TotalDue = null;
					
							row1.Comment = null;
					
							row1.rowguid = null;
					
							row1.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.SalesOrderID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.RevisionNumber = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.RevisionNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.OrderDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.DueDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.DueDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.OnlineOrderFlag = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.ShipDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.ShipDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.Status = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.SalesOrderNumber = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.SalesOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row1", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row1.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.ShipToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipToAddressID", "row1", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row1.ShipToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ShipToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.BillToAddressID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.BillToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.ShipMethod = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.ShipMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.CreditCardApprovalCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.CreditCardApprovalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.SubTotal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.SubTotal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.TaxAmt = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.TaxAmt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.Freight = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.Freight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TotalDue = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TotalDue", "row1", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row1.TotalDue = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.TotalDue = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.Comment = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.Comment = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.rowguid = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.ModifiedDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.AddressID = row1.ShipToAddressID ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

SAIDA = null;
VENDEDOR = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'SAIDA'
SAIDA_tmp.OrderDate = row1.OrderDate ;
SAIDA_tmp.OnlineOrderFlag = row1.OnlineOrderFlag ;
SAIDA_tmp.CountryRegion = row2.CountryRegion ;
SAIDA_tmp.TotalDue = row1.TotalDue ;
SAIDA = SAIDA_tmp;

// # Output table : 'VENDEDOR'
VENDEDOR_tmp.OrderDate = row1.OrderDate  ;
VENDEDOR_tmp.OnlineOrderFlag = row1.OnlineOrderFlag  ;
VENDEDOR_tmp.CountryRegion = row2.CountryRegion  ;
VENDEDOR_tmp.TotalDue = row1.TotalDue  ;
VENDEDOR_tmp.CustomerID = row1.CustomerID ;
VENDEDOR = VENDEDOR_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "SAIDA"
if(SAIDA != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA");
					}
					
	
operation_finder_tAggregateRow_1.OrderDate = SAIDA.OrderDate;
			operation_finder_tAggregateRow_1.OnlineOrderFlag = SAIDA.OnlineOrderFlag;
			operation_finder_tAggregateRow_1.CountryRegion = SAIDA.CountryRegion;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.OrderDate = operation_finder_tAggregateRow_1.OrderDate;
				operation_result_tAggregateRow_1.OnlineOrderFlag = operation_finder_tAggregateRow_1.OnlineOrderFlag;
				operation_result_tAggregateRow_1.CountryRegion = operation_finder_tAggregateRow_1.CountryRegion;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(SAIDA.TotalDue != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_1.TotalDue_sum == null) {
						operation_result_tAggregateRow_1.TotalDue_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_1.TotalDue_sum = operation_result_tAggregateRow_1.TotalDue_sum.add(
						new BigDecimal(
							String.valueOf(
								SAIDA.TotalDue
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA"




// Start of branch "VENDEDOR"
if(VENDEDOR != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"VENDEDOR");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row4HashKey.CustomerID = VENDEDOR.CustomerID ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

SAIDA_VENDEDORES = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'SAIDA_VENDEDORES'
SAIDA_VENDEDORES_tmp.OrderDate = VENDEDOR.OrderDate ;
SAIDA_VENDEDORES_tmp.OnlineOrderFlag = VENDEDOR.OnlineOrderFlag ;
SAIDA_VENDEDORES_tmp.CountryRegion = VENDEDOR.CountryRegion ;
SAIDA_VENDEDORES_tmp.TotalDue = VENDEDOR.TotalDue ;
SAIDA_VENDEDORES_tmp.SalesPerson = row4.SalesPerson ;
SAIDA_VENDEDORES = SAIDA_VENDEDORES_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "SAIDA_VENDEDORES"
if(SAIDA_VENDEDORES != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA_VENDEDORES");
					}
					
	
operation_finder_tAggregateRow_2.OrderDate = SAIDA_VENDEDORES.OrderDate;
			operation_finder_tAggregateRow_2.OnlineOrderFlag = SAIDA_VENDEDORES.OnlineOrderFlag;
			operation_finder_tAggregateRow_2.CountryRegion = SAIDA_VENDEDORES.CountryRegion;
			operation_finder_tAggregateRow_2.SalesPerson = SAIDA_VENDEDORES.SalesPerson;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.OrderDate = operation_finder_tAggregateRow_2.OrderDate;
				operation_result_tAggregateRow_2.OnlineOrderFlag = operation_finder_tAggregateRow_2.OnlineOrderFlag;
				operation_result_tAggregateRow_2.CountryRegion = operation_finder_tAggregateRow_2.CountryRegion;
				operation_result_tAggregateRow_2.SalesPerson = operation_finder_tAggregateRow_2.SalesPerson;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
				if(SAIDA_VENDEDORES.TotalDue != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_2.TotalDue_sum == null) {
						operation_result_tAggregateRow_2.TotalDue_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_2.TotalDue_sum = operation_result_tAggregateRow_2.TotalDue_sum.add(
						new BigDecimal(
							String.valueOf(
								SAIDA_VENDEDORES.TotalDue
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA_VENDEDORES"



	
		} // close loop of lookup 'row4' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "VENDEDOR"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("D:/DATA_OPS_PROJETO/CURATED/REL_VENDAS_V1.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("OrderDate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("OnlineOrderFlag");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CountryRegion");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("TotalDue");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row3.OrderDate = aggregated_row_tAggregateRow_1.OrderDate;
            				    
            				    row3.OnlineOrderFlag = aggregated_row_tAggregateRow_1.OnlineOrderFlag;
            				    
            				    row3.CountryRegion = aggregated_row_tAggregateRow_1.CountryRegion;
            				    
    								if(aggregated_row_tAggregateRow_1.TotalDue_sum != null) {
    								row3.TotalDue = aggregated_row_tAggregateRow_1.TotalDue_sum.floatValue();
										
    								}else{
    								
    									row3.TotalDue = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.OrderDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.OrderDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.OnlineOrderFlag != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.OnlineOrderFlag
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.CountryRegion != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.TotalDue != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.TotalDue
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */










	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"VENDEDOR");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA_VENDEDORES");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow5Struct extends row5Struct implements Comparable<Comparablerow5Struct> {
	
	public int compareTo(Comparablerow5Struct other) {

		if(this.TotalDue == null && other.TotalDue != null){
			return 1;
						
		}else if(this.TotalDue != null && other.TotalDue == null){
			return -1;
						
		}else if(this.TotalDue != null && other.TotalDue != null){
			if(!this.TotalDue.equals(other.TotalDue)){
				return other.TotalDue.compareTo(this.TotalDue);
			}
		}
		if(this.CountryRegion == null && other.CountryRegion != null){
			return -1;
						
		}else if(this.CountryRegion != null && other.CountryRegion == null){
			return 1;
						
		}else if(this.CountryRegion != null && other.CountryRegion != null){
			if(!this.CountryRegion.equals(other.CountryRegion)){
				return this.CountryRegion.compareTo(other.CountryRegion);
			}
		}
		if(this.SalesPerson == null && other.SalesPerson != null){
			return -1;
						
		}else if(this.SalesPerson != null && other.SalesPerson == null){
			return 1;
						
		}else if(this.SalesPerson != null && other.SalesPerson != null){
			if(!this.SalesPerson.equals(other.SalesPerson)){
				return this.SalesPerson.compareTo(other.SalesPerson);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow5Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow5Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row5.OrderDate = aggregated_row_tAggregateRow_2.OrderDate;
            				    
            				    row5.OnlineOrderFlag = aggregated_row_tAggregateRow_2.OnlineOrderFlag;
            				    
            				    row5.CountryRegion = aggregated_row_tAggregateRow_2.CountryRegion;
            				    
    								if(aggregated_row_tAggregateRow_2.TotalDue_sum != null) {
    								row5.TotalDue = aggregated_row_tAggregateRow_2.TotalDue_sum.floatValue();
										
    								}else{
    								
    									row5.TotalDue = null;
    									
    								}
    								
            				    row5.SalesPerson = aggregated_row_tAggregateRow_2.SalesPerson;
            				    

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					



	Comparablerow5Struct arrayRowtSortRow_1_SortOut = new Comparablerow5Struct();

	arrayRowtSortRow_1_SortOut.OrderDate = row5.OrderDate;
	arrayRowtSortRow_1_SortOut.OnlineOrderFlag = row5.OnlineOrderFlag;
	arrayRowtSortRow_1_SortOut.CountryRegion = row5.CountryRegion;
	arrayRowtSortRow_1_SortOut.TotalDue = row5.TotalDue;
	arrayRowtSortRow_1_SortOut.SalesPerson = row5.SalesPerson;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row5Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow5Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("D:/DATA_OPS_PROJETO/CURATED/REL_VENDAS_V2.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("OrderDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("OnlineOrderFlag");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CountryRegion");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TotalDue");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SalesPerson");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


row5Struct[] array_tSortRow_1_SortIn = (row5Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row5Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row6.OrderDate = current_tSortRow_1_SortIn.OrderDate;
	row6.OnlineOrderFlag = current_tSortRow_1_SortIn.OnlineOrderFlag;
	row6.CountryRegion = current_tSortRow_1_SortIn.CountryRegion;
	row6.TotalDue = current_tSortRow_1_SortIn.TotalDue;
	row6.SalesPerson = current_tSortRow_1_SortIn.SalesPerson;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row6.OrderDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.OrderDate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.OnlineOrderFlag != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.OnlineOrderFlag
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.CountryRegion != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.TotalDue != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.TotalDue
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.SalesPerson != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.SalesPerson
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */










	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AddressID;

				public Integer getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AddressID == null) ? 0 : this.AddressID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.AddressID == null) {
							if (other.AddressID != null)
								return false;
						
						} else if (!this.AddressID.equals(other.AddressID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.PostalCode = this.PostalCode;
	            other.CountryRegion = this.CountryRegion;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.AddressID = this.AddressID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.AddressID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AddressID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AddressLine1 = readString(dis,ois);
					
						this.AddressLine2 = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this.PostalCode = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.AddressLine1, dos, oos);
					
						writeString(this.AddressLine2, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this.PostalCode, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeString(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(SAIDA,VENDEDOR)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_ADDRESS.CSV"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"US-ASCII")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"US-ASCII")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row2.AddressID = null;
					
							row2.AddressLine1 = null;
					
							row2.AddressLine2 = null;
					
							row2.City = null;
					
							row2.PostalCode = null;
					
							row2.CountryRegion = null;
					
							row2.rowguid = null;
					
							row2.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row2.AddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AddressID", "row2", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row2.AddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.AddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.AddressLine1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.AddressLine1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.AddressLine2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.AddressLine2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.City = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.City = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.PostalCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.PostalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.CountryRegion = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.CountryRegion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.rowguid = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row2.ModifiedDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row2.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.AddressID = row2.AddressID;
				
				row2_HashRow.AddressLine1 = row2.AddressLine1;
				
				row2_HashRow.AddressLine2 = row2.AddressLine2;
				
				row2_HashRow.City = row2.City;
				
				row2_HashRow.PostalCode = row2.PostalCode;
				
				row2_HashRow.CountryRegion = row2.CountryRegion;
				
				row2_HashRow.rowguid = row2.rowguid;
				
				row2_HashRow.ModifiedDate = row2.ModifiedDate;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            other.SalesPerson = this.SalesPerson;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SalesPerson = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SalesPerson, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_2) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(VENDEDOR,row4) outputs:(SAIDA_VENDEDORES)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row4 = null;			
									
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row4.CustomerID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row4", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row4.CustomerID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row4.SalesPerson = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row4.rowguid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row4.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row4", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row4.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.CustomerID = row4.CustomerID;
				
				row4_HashRow.SalesPerson = row4.SalesPerson;
				
				row4_HashRow.rowguid = row4.rowguid;
				
				row4_HashRow.ModifiedDate = row4.ModifiedDate;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.CountryRegion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",CountryRegion="+CountryRegion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.CountryRegion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",CountryRegion="+CountryRegion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDA_VENDAS_REGIAOStruct implements routines.system.IPersistableRow<SAIDA_VENDAS_REGIAOStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.CountryRegion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",CountryRegion="+CountryRegion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDA_VENDAS_REGIAOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDA_VENDAS_PRODUTOSStruct implements routines.system.IPersistableRow<SAIDA_VENDAS_PRODUTOSStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDA_VENDAS_PRODUTOSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class VENDASStruct implements routines.system.IPersistableRow<VENDASStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
						this.ProductID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(VENDASStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public String TotalDue;

				public String getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.CustomerID = readString(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
					this.TotalDue = readString(dis);
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// String
				
						writeString(this.TotalDue,dos);
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+TotalDue);
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_4Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public String TotalDue;

				public String getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.CustomerID = readString(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
					this.TotalDue = readString(dis);
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// String
				
						writeString(this.TotalDue,dos);
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+TotalDue);
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_6Process(globalMap);
		tFileInputDelimited_5Process(globalMap);
		tFileInputDelimited_7Process(globalMap);

		row7Struct row7 = new row7Struct();
VENDASStruct VENDAS = new VENDASStruct();
SAIDA_VENDAS_PRODUTOSStruct SAIDA_VENDAS_PRODUTOS = new SAIDA_VENDAS_PRODUTOSStruct();
SAIDA_VENDAS_REGIAOStruct SAIDA_VENDAS_REGIAO = new SAIDA_VENDAS_REGIAOStruct();
row11Struct row11 = new row11Struct();







	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA_VENDAS_REGIAO");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date OrderDate;
    				String Name;BigDecimal UnitPrice_sum;
           			
         			Integer OrderQty_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.OrderDate == null) ? 0 : this.OrderDate.hashCode());
							
							result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.OrderDate == null) {
								if (other.OrderDate != null) 
									return false;
							} else if (!this.OrderDate.equals(other.OrderDate)) 
								return false;
						
							if (this.Name == null) {
								if (other.Name != null) 
									return false;
							} else if (!this.Name.equals(other.Name)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA_VENDAS_PRODUTOS");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDA_VENDAS_REGIAOStruct SAIDA_VENDAS_REGIAO_tmp = new SAIDA_VENDAS_REGIAOStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"VENDAS");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDA_VENDAS_PRODUTOSStruct SAIDA_VENDAS_PRODUTOS_tmp = new SAIDA_VENDAS_PRODUTOSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
VENDASStruct VENDAS_tmp = new VENDASStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;	
				
				char fieldSeparator_tFileInputDelimited_4[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_4[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_4 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_4 = /** Start field tFileInputDelimited_4:FILENAME */"D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS.CSV"/** End field tFileInputDelimited_4:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;
	
				try{
					
						String[] rowtFileInputDelimited_4=null;
						int currentLinetFileInputDelimited_4 = 0;
	        			int outputLinetFileInputDelimited_4 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0;
			if(footer_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),"US-ASCII")), fieldSeparator_tFileInputDelimited_4[0]);
		        			}
					
					
					csvReadertFileInputDelimited_4.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )
	        			csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
	        				csvReadertFileInputDelimited_4.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_4 > 0){
						for(totalLinetFileInputDelimited_4=0;totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++){
							csvReadertFileInputDelimited_4.readNext();
						}
						csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_4.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_4++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4   < 0? 0 : totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4 ;
	            		if(lastLinetFileInputDelimited_4 > 0){
	                		lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4 : lastLineTemptFileInputDelimited_4; 
	            		}else {
	                		lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
	            		}
	         
			          	csvReadertFileInputDelimited_4.close();
				        if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),"US-ASCII")), fieldSeparator_tFileInputDelimited_4[0]);
						}
						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )	
	        				csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
							csvReadertFileInputDelimited_4.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_4 != 0){
			        	for(currentLinetFileInputDelimited_4=0;currentLinetFileInputDelimited_4 < 1;currentLinetFileInputDelimited_4++){
			        		csvReadertFileInputDelimited_4.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_4 != 0 && csvReadertFileInputDelimited_4!=null && csvReadertFileInputDelimited_4.readNext() ) { 
	        		rowstate_tFileInputDelimited_4.reset();
	        
		        	rowtFileInputDelimited_4=csvReadertFileInputDelimited_4.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_4++;
	            
		            if(lastLinetFileInputDelimited_4 > -1 && currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_4++;
	            	if (limittFileInputDelimited_4 > 0 && outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
	                	break;
	            	}  
	                                                                      
					
	    							row7 = null;			
								
								boolean whetherReject_tFileInputDelimited_4 = false;
								row7 = new row7Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])){//empty line when row separator is '\n'
					
							row7.SalesOrderID = null;
					
							row7.RevisionNumber = null;
					
							row7.OrderDate = null;
					
							row7.DueDate = null;
					
							row7.OnlineOrderFlag = null;
					
							row7.ShipDate = null;
					
							row7.Status = null;
					
							row7.SalesOrderNumber = null;
					
							row7.CustomerID = null;
					
							row7.ShipToAddressID = null;
					
							row7.BillToAddressID = null;
					
							row7.ShipMethod = null;
					
							row7.CreditCardApprovalCode = null;
					
							row7.SubTotal = null;
					
							row7.TaxAmt = null;
					
							row7.Freight = null;
					
							row7.TotalDue = null;
					
							row7.Comment = null;
					
							row7.rowguid = null;
					
							row7.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_4 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_4 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row7.SalesOrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderID", "row7", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row7.SalesOrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row7.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.RevisionNumber = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.RevisionNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
											row7.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row7", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row7.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row7.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.DueDate = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.DueDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.OnlineOrderFlag = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.ShipDate = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.ShipDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.Status = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.SalesOrderNumber = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.SalesOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.CustomerID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row7.ShipToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipToAddressID", "row7", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row7.ShipToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row7.ShipToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row7.BillToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BillToAddressID", "row7", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row7.BillToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row7.BillToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.ShipMethod = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.ShipMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.CreditCardApprovalCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.CreditCardApprovalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.SubTotal = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.SubTotal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.TaxAmt = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.TaxAmt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.Freight = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.Freight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.TotalDue = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.TotalDue = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.Comment = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.Comment = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.rowguid = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row7.ModifiedDate = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row7.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_4.getException()!=null) {
										throw rowstate_tFileInputDelimited_4.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_4 = true;
        							
                							System.err.println(e.getMessage());
                							row7 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row8HashKey.SalesOrderID = row7.SalesOrderID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
	
		  								forceLooprow8 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow8 = true;
			           		  	} // G 21
                    		  	
                    		

							row8Struct row8 = null;
                    		  	 
							

								while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row8'
									
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								
								if(!forceLooprow8) { // G 46
								
							
								 
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow8 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

VENDAS = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'VENDAS'
VENDAS_tmp.OrderDate = row7.OrderDate ;
VENDAS_tmp.UnitPrice = row8.UnitPrice ;
VENDAS_tmp.OrderQty = row8.OrderQty ;
VENDAS_tmp.ProductID = row8.ProductID ;
VENDAS_tmp.ShipToAddressID = row7.ShipToAddressID ;
VENDAS = VENDAS_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "VENDAS"
if(VENDAS != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"VENDAS");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row9HashKey.ProductID = VENDAS.ProductID ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							row9Struct row9 = null;
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

SAIDA_VENDAS_PRODUTOS = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'SAIDA_VENDAS_PRODUTOS'
SAIDA_VENDAS_PRODUTOS_tmp.OrderDate = VENDAS.OrderDate ;
SAIDA_VENDAS_PRODUTOS_tmp.UnitPrice = VENDAS.UnitPrice ;
SAIDA_VENDAS_PRODUTOS_tmp.OrderQty = VENDAS.OrderQty ;
SAIDA_VENDAS_PRODUTOS_tmp.Name = row9.Name ;
SAIDA_VENDAS_PRODUTOS_tmp.ShipToAddressID = VENDAS.ShipToAddressID ;
SAIDA_VENDAS_PRODUTOS = SAIDA_VENDAS_PRODUTOS_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "SAIDA_VENDAS_PRODUTOS"
if(SAIDA_VENDAS_PRODUTOS != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA_VENDAS_PRODUTOS");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row10HashKey.AddressID = SAIDA_VENDAS_PRODUTOS.ShipToAddressID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.AddressID = '" + row10HashKey.AddressID + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

SAIDA_VENDAS_REGIAO = null;


// # Output table : 'SAIDA_VENDAS_REGIAO'
SAIDA_VENDAS_REGIAO_tmp.OrderDate = SAIDA_VENDAS_PRODUTOS.OrderDate ;
SAIDA_VENDAS_REGIAO_tmp.UnitPrice = SAIDA_VENDAS_PRODUTOS.UnitPrice ;
SAIDA_VENDAS_REGIAO_tmp.OrderQty = SAIDA_VENDAS_PRODUTOS.OrderQty ;
SAIDA_VENDAS_REGIAO_tmp.Name = SAIDA_VENDAS_PRODUTOS.Name ;
SAIDA_VENDAS_REGIAO_tmp.CountryRegion = row10.CountryRegion ;
SAIDA_VENDAS_REGIAO = SAIDA_VENDAS_REGIAO_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "SAIDA_VENDAS_REGIAO"
if(SAIDA_VENDAS_REGIAO != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA_VENDAS_REGIAO");
					}
					
	
operation_finder_tAggregateRow_3.OrderDate = SAIDA_VENDAS_REGIAO.OrderDate;
			operation_finder_tAggregateRow_3.Name = SAIDA_VENDAS_REGIAO.Name;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.OrderDate = operation_finder_tAggregateRow_3.OrderDate;
				operation_result_tAggregateRow_3.Name = operation_finder_tAggregateRow_3.Name;
				
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
				if(SAIDA_VENDAS_REGIAO.UnitPrice != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_3.UnitPrice_sum == null) {
						operation_result_tAggregateRow_3.UnitPrice_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_3.UnitPrice_sum = operation_result_tAggregateRow_3.UnitPrice_sum.add(
						new BigDecimal(
							String.valueOf(
								SAIDA_VENDAS_REGIAO.UnitPrice
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(SAIDA_VENDAS_REGIAO.OrderQty != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_3.OrderQty_sum == null) {
						operation_result_tAggregateRow_3.OrderQty_sum = (int) 0;
					}
					
					if( SAIDA_VENDAS_REGIAO.OrderQty != null)
						operation_result_tAggregateRow_3.OrderQty_sum += SAIDA_VENDAS_REGIAO.OrderQty;
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA_VENDAS_REGIAO"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "SAIDA_VENDAS_PRODUTOS"



	
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "VENDAS"



	
		} // close loop of lookup 'row8' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	


				nb_line_tFileInputDelimited_4++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_4!=null){
    					csvReadertFileInputDelimited_4.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_4!=null){
    				globalMap.put("tFileInputDelimited_4_NB_LINE",nb_line_tFileInputDelimited_4);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"VENDAS");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA_VENDAS_PRODUTOS");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA_VENDAS_REGIAO");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("D:/DATA_OPS_PROJETO/CURATED/REL_VENDAS_REGIAO_MENSAL.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("OrderDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("UnitPrice");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OrderQty");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Name");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("CountryRegion");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

            				    row11.OrderDate = aggregated_row_tAggregateRow_3.OrderDate;
            				    
    								if(aggregated_row_tAggregateRow_3.UnitPrice_sum != null) {
    								row11.UnitPrice = aggregated_row_tAggregateRow_3.UnitPrice_sum.floatValue();
										
    								}else{
    								
    									row11.UnitPrice = null;
    									
    								}
    								row11.OrderQty = aggregated_row_tAggregateRow_3.OrderQty_sum;
                                	
            				    row11.Name = aggregated_row_tAggregateRow_3.Name;
            				    

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row11.OrderDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(row11.OrderDate, "MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row11.UnitPrice != null) {
                        sb_tFileOutputDelimited_3.append(
                            row11.UnitPrice
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row11.OrderQty != null) {
                        sb_tFileOutputDelimited_3.append(
                            row11.OrderQty
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row11.Name != null) {
                        sb_tFileOutputDelimited_3.append(
                            row11.Name
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row11.CountryRegion != null) {
                        sb_tFileOutputDelimited_3.append(
                            row11.CountryRegion
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer SalesOrderDetailID;

				public Integer getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Float UnitPriceDiscount;

				public Float getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public Float LineTotal;

				public Float getLineTotal () {
					return this.LineTotal;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SalesOrderID == null) ? 0 : this.SalesOrderID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.SalesOrderID == null) {
							if (other.SalesOrderID != null)
								return false;
						
						} else if (!this.SalesOrderID.equals(other.SalesOrderID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SalesOrderDetailID = readInteger(dis,ois);
					
						this.OrderQty = readInteger(dis,ois);
					
						this.ProductID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPriceDiscount = null;
           				} else {
           			    	this.UnitPriceDiscount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LineTotal = null;
           				} else {
           			    	this.LineTotal = dis.readFloat();
           				}
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SalesOrderDetailID, dos, oos);
					
					writeInteger(this.OrderQty, dos, oos);
					
					writeInteger(this.ProductID, dos, oos);
					
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
						if(this.UnitPriceDiscount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPriceDiscount);
		            	}
					
						if(this.LineTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LineTotal);
		            	}
					
						writeString(this.rowguid, dos, oos);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_4) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_3 - inputs:(row7,row8) outputs:(VENDAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV";
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						row8 = null;			
									
			    						row8 = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									row8 = new row8Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.SalesOrderID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.SalesOrderID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.SalesOrderDetailID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.SalesOrderDetailID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.OrderQty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.OrderQty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.UnitPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPrice", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.UnitPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 5;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.UnitPriceDiscount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPriceDiscount", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.UnitPriceDiscount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 6;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.LineTotal = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.LineTotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 7;
					
							row8.rowguid = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 8;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									row8.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row8 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.SalesOrderID = row8.SalesOrderID;
				
				row8_HashRow.SalesOrderDetailID = row8.SalesOrderDetailID;
				
				row8_HashRow.OrderQty = row8.OrderQty;
				
				row8_HashRow.ProductID = row8.ProductID;
				
				row8_HashRow.UnitPrice = row8.UnitPrice;
				
				row8_HashRow.UnitPriceDiscount = row8.UnitPriceDiscount;
				
				row8_HashRow.LineTotal = row8.LineTotal;
				
				row8_HashRow.rowguid = row8.rowguid;
				
				row8_HashRow.ModifiedDate = row8.ModifiedDate;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Float StandardCost;

				public Float getStandardCost () {
					return this.StandardCost;
				}
				
			    public Float ListPrice;

				public Float getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Weight;

				public String getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public String ThumbNailPhoto;

				public String getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductID == null) ? 0 : this.ProductID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ProductID == null) {
							if (other.ProductID != null)
								return false;
						
						} else if (!this.ProductID.equals(other.ProductID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ThumbNailPhoto = this.ThumbNailPhoto;
	            other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ProductID = this.ProductID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.ProductNumber = readString(dis,ois);
					
						this.Color = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ListPrice = null;
           				} else {
           			    	this.ListPrice = dis.readFloat();
           				}
					
						this.Size = readString(dis,ois);
					
						this.Weight = readString(dis,ois);
					
						this.ProductCategoryID = readInteger(dis,ois);
					
						this.ProductModelID = readInteger(dis,ois);
					
						this.SellStartDate = readString(dis,ois);
					
						this.SellEndDate = readString(dis,ois);
					
						this.DiscontinuedDate = readString(dis,ois);
					
						this.ThumbNailPhoto = readString(dis,ois);
					
						this.ThumbnailPhotoFileName = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.ProductNumber, dos, oos);
					
						writeString(this.Color, dos, oos);
					
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.StandardCost);
		            	}
					
						if(this.ListPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ListPrice);
		            	}
					
						writeString(this.Size, dos, oos);
					
						writeString(this.Weight, dos, oos);
					
					writeInteger(this.ProductCategoryID, dos, oos);
					
					writeInteger(this.ProductModelID, dos, oos);
					
						writeString(this.SellStartDate, dos, oos);
					
						writeString(this.SellEndDate, dos, oos);
					
						writeString(this.DiscontinuedDate, dos, oos);
					
						writeString(this.ThumbNailPhoto, dos, oos);
					
						writeString(this.ThumbnailPhotoFileName, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeString(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+Weight);
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
		sb.append(",ThumbNailPhoto="+ThumbNailPhoto);
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_4) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_4 - inputs:(VENDAS,row9) outputs:(SAIDA_VENDAS_PRODUTOS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row9 = null;			
									
			    						row9 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row9 = new row9Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							row9.Name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							row9.ProductNumber = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
							row9.Color = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.StandardCost = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"StandardCost", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.StandardCost = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 5;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.ListPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ListPrice", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.ListPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 6;
					
							row9.Size = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 7;
					
							row9.Weight = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 8;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 9;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.ProductModelID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.ProductModelID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 10;
					
							row9.SellStartDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 11;
					
							row9.SellEndDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 12;
					
							row9.DiscontinuedDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 13;
					
							row9.ThumbNailPhoto = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 14;
					
							row9.ThumbnailPhotoFileName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 15;
					
							row9.rowguid = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 16;
					
							row9.ModifiedDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row9 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ProductID = row9.ProductID;
				
				row9_HashRow.Name = row9.Name;
				
				row9_HashRow.ProductNumber = row9.ProductNumber;
				
				row9_HashRow.Color = row9.Color;
				
				row9_HashRow.StandardCost = row9.StandardCost;
				
				row9_HashRow.ListPrice = row9.ListPrice;
				
				row9_HashRow.Size = row9.Size;
				
				row9_HashRow.Weight = row9.Weight;
				
				row9_HashRow.ProductCategoryID = row9.ProductCategoryID;
				
				row9_HashRow.ProductModelID = row9.ProductModelID;
				
				row9_HashRow.SellStartDate = row9.SellStartDate;
				
				row9_HashRow.SellEndDate = row9.SellEndDate;
				
				row9_HashRow.DiscontinuedDate = row9.DiscontinuedDate;
				
				row9_HashRow.ThumbNailPhoto = row9.ThumbNailPhoto;
				
				row9_HashRow.ThumbnailPhotoFileName = row9.ThumbnailPhotoFileName;
				
				row9_HashRow.rowguid = row9.rowguid;
				
				row9_HashRow.ModifiedDate = row9.ModifiedDate;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AddressID;

				public Integer getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AddressID == null) ? 0 : this.AddressID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.AddressID == null) {
							if (other.AddressID != null)
								return false;
						
						} else if (!this.AddressID.equals(other.AddressID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.PostalCode = this.PostalCode;
	            other.CountryRegion = this.CountryRegion;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.AddressID = this.AddressID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.AddressID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AddressID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AddressLine1 = readString(dis,ois);
					
						this.AddressLine2 = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this.PostalCode = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.AddressLine1, dos, oos);
					
						writeString(this.AddressLine2, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this.PostalCode, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeString(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tFileInputDelimited_7 - inputs:(after_tFileInputDelimited_4) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_5 - inputs:(SAIDA_VENDAS_PRODUTOS,row10) outputs:(SAIDA_VENDAS_REGIAO)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;	
				
				char fieldSeparator_tFileInputDelimited_7[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_7[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_7 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_7 = /** Start field tFileInputDelimited_7:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_ADDRESS.CSV"/** End field tFileInputDelimited_7:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;
	
				try{
					
						String[] rowtFileInputDelimited_7=null;
						int currentLinetFileInputDelimited_7 = 0;
	        			int outputLinetFileInputDelimited_7 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0;
			if(footer_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"US-ASCII")), fieldSeparator_tFileInputDelimited_7[0]);
		        			}
					
					
					csvReadertFileInputDelimited_7.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )
	        			csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
	        				csvReadertFileInputDelimited_7.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_7 > 0){
						for(totalLinetFileInputDelimited_7=0;totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++){
							csvReadertFileInputDelimited_7.readNext();
						}
						csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_7.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_7++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7   < 0? 0 : totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7 ;
	            		if(lastLinetFileInputDelimited_7 > 0){
	                		lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7 : lastLineTemptFileInputDelimited_7; 
	            		}else {
	                		lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
	            		}
	         
			          	csvReadertFileInputDelimited_7.close();
				        if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"US-ASCII")), fieldSeparator_tFileInputDelimited_7[0]);
						}
						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )	
	        				csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
							csvReadertFileInputDelimited_7.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_7 != 0){
			        	for(currentLinetFileInputDelimited_7=0;currentLinetFileInputDelimited_7 < 1;currentLinetFileInputDelimited_7++){
			        		csvReadertFileInputDelimited_7.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_7 != 0 && csvReadertFileInputDelimited_7!=null && csvReadertFileInputDelimited_7.readNext() ) { 
	        		rowstate_tFileInputDelimited_7.reset();
	        
		        	rowtFileInputDelimited_7=csvReadertFileInputDelimited_7.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_7++;
	            
		            if(lastLinetFileInputDelimited_7 > -1 && currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_7++;
	            	if (limittFileInputDelimited_7 > 0 && outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
	                	break;
	            	}  
	                                                                      
					
	    							row10 = null;			
								
	    							row10 = null;			
								
								boolean whetherReject_tFileInputDelimited_7 = false;
								row10 = new row10Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_7.length == 1 && ("\015").equals(rowtFileInputDelimited_7[0])){//empty line when row separator is '\n'
					
							row10.AddressID = null;
					
							row10.AddressLine1 = null;
					
							row10.AddressLine2 = null;
					
							row10.City = null;
					
							row10.PostalCode = null;
					
							row10.CountryRegion = null;
					
							row10.rowguid = null;
					
							row10.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_7 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_7 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
								
									if(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {
									
										row10.AddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_7) {
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AddressID", "row10", rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7], ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
										}
    								}else{
    									
											
												row10.AddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row10.AddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.AddressLine1 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.AddressLine1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.AddressLine2 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.AddressLine2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.City = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.City = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.PostalCode = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.PostalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.CountryRegion = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.CountryRegion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.rowguid = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row10.ModifiedDate = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row10.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_7.getException()!=null) {
										throw rowstate_tFileInputDelimited_7.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_7 = true;
        							
                							System.err.println(e.getMessage());
                							row10 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.AddressID = row10.AddressID;
				
				row10_HashRow.AddressLine1 = row10.AddressLine1;
				
				row10_HashRow.AddressLine2 = row10.AddressLine2;
				
				row10_HashRow.City = row10.City;
				
				row10_HashRow.PostalCode = row10.PostalCode;
				
				row10_HashRow.CountryRegion = row10.CountryRegion;
				
				row10_HashRow.rowguid = row10.rowguid;
				
				row10_HashRow.ModifiedDate = row10.ModifiedDate;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	


				nb_line_tFileInputDelimited_7++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_7!=null){
    					csvReadertFileInputDelimited_7.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_7!=null){
    				globalMap.put("tFileInputDelimited_7_NB_LINE",nb_line_tFileInputDelimited_7);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	


public static class SAIDA_VENDEDOR_MENSALStruct implements routines.system.IPersistableRow<SAIDA_VENDEDOR_MENSALStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.SalesPerson = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDA_VENDEDOR_MENSALStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfSAIDA_VENDAS_REGIAOStruct implements routines.system.IPersistableRow<copyOfSAIDA_VENDAS_REGIAOStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.CountryRegion = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfSAIDA_VENDAS_REGIAOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfSAIDA_VENDAS_PRODUTOSStruct implements routines.system.IPersistableRow<copyOfSAIDA_VENDAS_PRODUTOSStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
					this.Name = readString(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",Name="+Name);
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfSAIDA_VENDAS_PRODUTOSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfVENDASStruct implements routines.system.IPersistableRow<copyOfVENDASStruct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
						this.OrderQty = readInteger(dis);
					
						this.ProductID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfVENDASStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public String TotalDue;

				public String getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
					this.TotalDue = readString(dis);
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// String
				
						writeString(this.TotalDue,dos);
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+TotalDue);
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_8Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public String RevisionNumber;

				public String getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public String SubTotal;

				public String getSubTotal () {
					return this.SubTotal;
				}
				
			    public String TaxAmt;

				public String getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public String Freight;

				public String getFreight () {
					return this.Freight;
				}
				
			    public String TotalDue;

				public String getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_CURATED.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_CURATED.length == 0) {
   					commonByteArray_DATA_OPS_CURATED = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_CURATED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_CURATED, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_CURATED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
					this.RevisionNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readString(dis);
					
					this.OnlineOrderFlag = readString(dis);
					
					this.ShipDate = readString(dis);
					
					this.Status = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
					this.SubTotal = readString(dis);
					
					this.TaxAmt = readString(dis);
					
					this.Freight = readString(dis);
					
					this.TotalDue = readString(dis);
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// String
				
						writeString(this.RevisionNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// String
				
						writeString(this.SubTotal,dos);
					
					// String
				
						writeString(this.TaxAmt,dos);
					
					// String
				
						writeString(this.Freight,dos);
					
					// String
				
						writeString(this.TotalDue,dos);
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+RevisionNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+Status);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+SubTotal);
		sb.append(",TaxAmt="+TaxAmt);
		sb.append(",Freight="+Freight);
		sb.append(",TotalDue="+TotalDue);
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_9Process(globalMap);
		tFileInputDelimited_10Process(globalMap);
		tFileInputDelimited_11Process(globalMap);
		tFileInputDelimited_12Process(globalMap);

		row12Struct row12 = new row12Struct();
copyOfVENDASStruct copyOfVENDAS = new copyOfVENDASStruct();
copyOfSAIDA_VENDAS_PRODUTOSStruct copyOfSAIDA_VENDAS_PRODUTOS = new copyOfSAIDA_VENDAS_PRODUTOSStruct();
copyOfSAIDA_VENDAS_REGIAOStruct copyOfSAIDA_VENDAS_REGIAO = new copyOfSAIDA_VENDAS_REGIAOStruct();
SAIDA_VENDEDOR_MENSALStruct SAIDA_VENDEDOR_MENSAL = new SAIDA_VENDEDOR_MENSALStruct();








	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA_VENDEDOR_MENSAL");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File("D:/DATA_OPS_PROJETO/CURATED/REL_VENDAS_REGIAO_SEMANAL.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("OrderDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("UnitPrice");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("OrderQty");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Name");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CountryRegion");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("SalesPerson");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfSAIDA_VENDAS_REGIAO");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDA_VENDEDOR_MENSALStruct SAIDA_VENDEDOR_MENSAL_tmp = new SAIDA_VENDEDOR_MENSALStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfSAIDA_VENDAS_PRODUTOS");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfSAIDA_VENDAS_REGIAOStruct copyOfSAIDA_VENDAS_REGIAO_tmp = new copyOfSAIDA_VENDAS_REGIAOStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfVENDAS");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfSAIDA_VENDAS_PRODUTOSStruct copyOfSAIDA_VENDAS_PRODUTOS_tmp = new copyOfSAIDA_VENDAS_PRODUTOSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfVENDASStruct copyOfVENDAS_tmp = new copyOfVENDASStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;	
				
				char fieldSeparator_tFileInputDelimited_8[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_8 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_8[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_8 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_8 = /** Start field tFileInputDelimited_8:FILENAME */"D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS.CSV"/** End field tFileInputDelimited_8:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;
	
				try{
					
						String[] rowtFileInputDelimited_8=null;
						int currentLinetFileInputDelimited_8 = 0;
	        			int outputLinetFileInputDelimited_8 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0;
			if(footer_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_8=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_8, fieldSeparator_tFileInputDelimited_8[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_8=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_8)),"US-ASCII")), fieldSeparator_tFileInputDelimited_8[0]);
		        			}
					
					
					csvReadertFileInputDelimited_8.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_8[0] != '\n') && (rowSeparator_tFileInputDelimited_8[0] != '\r') )
	        			csvReadertFileInputDelimited_8.setLineEnd(""+rowSeparator_tFileInputDelimited_8[0]);
						
	        				csvReadertFileInputDelimited_8.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_8.setEscapeChar(csvReadertFileInputDelimited_8.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_8 > 0){
						for(totalLinetFileInputDelimited_8=0;totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++){
							csvReadertFileInputDelimited_8.readNext();
						}
						csvReadertFileInputDelimited_8.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_8.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_8++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8 - footer_tFileInputDelimited_8   < 0? 0 : totalLinetFileInputDelimited_8 - footer_tFileInputDelimited_8 ;
	            		if(lastLinetFileInputDelimited_8 > 0){
	                		lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8 : lastLineTemptFileInputDelimited_8; 
	            		}else {
	                		lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
	            		}
	         
			          	csvReadertFileInputDelimited_8.close();
				        if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_8=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_8, fieldSeparator_tFileInputDelimited_8[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_8=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_8)),"US-ASCII")), fieldSeparator_tFileInputDelimited_8[0]);
						}
						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_8[0] != '\n') && (rowSeparator_tFileInputDelimited_8[0] != '\r') )	
	        				csvReadertFileInputDelimited_8.setLineEnd(""+rowSeparator_tFileInputDelimited_8[0]);
						
							csvReadertFileInputDelimited_8.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_8.setEscapeChar(csvReadertFileInputDelimited_8.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_8 != 0){
			        	for(currentLinetFileInputDelimited_8=0;currentLinetFileInputDelimited_8 < 1;currentLinetFileInputDelimited_8++){
			        		csvReadertFileInputDelimited_8.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_8.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_8 != 0 && csvReadertFileInputDelimited_8!=null && csvReadertFileInputDelimited_8.readNext() ) { 
	        		rowstate_tFileInputDelimited_8.reset();
	        
		        	rowtFileInputDelimited_8=csvReadertFileInputDelimited_8.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_8++;
	            
		            if(lastLinetFileInputDelimited_8 > -1 && currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_8++;
	            	if (limittFileInputDelimited_8 > 0 && outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
	                	break;
	            	}  
	                                                                      
					
	    							row12 = null;			
								
								boolean whetherReject_tFileInputDelimited_8 = false;
								row12 = new row12Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_8_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_8_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_8.length == 1 && ("\015").equals(rowtFileInputDelimited_8[0])){//empty line when row separator is '\n'
					
							row12.SalesOrderID = null;
					
							row12.RevisionNumber = null;
					
							row12.OrderDate = null;
					
							row12.DueDate = null;
					
							row12.OnlineOrderFlag = null;
					
							row12.ShipDate = null;
					
							row12.Status = null;
					
							row12.SalesOrderNumber = null;
					
							row12.CustomerID = null;
					
							row12.ShipToAddressID = null;
					
							row12.BillToAddressID = null;
					
							row12.ShipMethod = null;
					
							row12.CreditCardApprovalCode = null;
					
							row12.SubTotal = null;
					
							row12.TaxAmt = null;
					
							row12.Freight = null;
					
							row12.TotalDue = null;
					
							row12.Comment = null;
					
							row12.rowguid = null;
					
							row12.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_8 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_8 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
								
									if(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8].length() > 0) {
										try {
									
										row12.SalesOrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_8) {
											rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderID", "row12", rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
										}
    								}else{
    									
											
												row12.SalesOrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row12.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.RevisionNumber = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.RevisionNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
								
									if(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8].length() > 0) {
										try {
									
											row12.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_8) {
											rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row12", rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
										}
    								}else{
    									
											
												row12.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row12.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.DueDate = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.DueDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.OnlineOrderFlag = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.ShipDate = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.ShipDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.Status = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.SalesOrderNumber = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.SalesOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
								
									if(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8].length() > 0) {
										try {
									
										row12.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_8) {
											rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row12", rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
										}
    								}else{
    									
											
												row12.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row12.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
								
									if(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8].length() > 0) {
										try {
									
										row12.ShipToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_8) {
											rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipToAddressID", "row12", rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
										}
    								}else{
    									
											
												row12.ShipToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row12.ShipToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
								
									if(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8].length() > 0) {
										try {
									
										row12.BillToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_8) {
											rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BillToAddressID", "row12", rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8], ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
										}
    								}else{
    									
											
												row12.BillToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row12.BillToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.ShipMethod = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.ShipMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.CreditCardApprovalCode = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.CreditCardApprovalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.SubTotal = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.SubTotal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.TaxAmt = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.TaxAmt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.Freight = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.Freight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.TotalDue = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.TotalDue = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.Comment = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.Comment = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.rowguid = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_8 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length){
						
						
							
									row12.ModifiedDate = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];
									
							
						
						}else{
						
							
								row12.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_8.getException()!=null) {
										throw rowstate_tFileInputDelimited_8.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_8 = true;
        							
                							System.err.println(e.getMessage());
                							row12 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row13HashKey.SalesOrderID = row12.SalesOrderID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
	
		  								forceLooprow13 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow13 = true;
			           		  	} // G 21
                    		  	
                    		

							row13Struct row13 = null;
                    		  	 
							

								while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row13'
									
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								
								if(!forceLooprow13) { // G 46
								
							
								 
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow13 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfVENDAS = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'copyOfVENDAS'
copyOfVENDAS_tmp.OrderDate = row12.OrderDate ;
copyOfVENDAS_tmp.UnitPrice = row13.UnitPrice ;
copyOfVENDAS_tmp.OrderQty = row13.OrderQty ;
copyOfVENDAS_tmp.ProductID = row13.ProductID ;
copyOfVENDAS_tmp.ShipToAddressID = row12.ShipToAddressID ;
copyOfVENDAS_tmp.CustomerID = row12.CustomerID ;
copyOfVENDAS = copyOfVENDAS_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfVENDAS"
if(copyOfVENDAS != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfVENDAS");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row14HashKey.ProductID = copyOfVENDAS.ProductID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
	
		  								forceLooprow14 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow14 = true;
			           		  	} // G 21
                    		  	
                    		

							row14Struct row14 = null;
                    		  	 
							

								while ((tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) || forceLooprow14) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row14'
									
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								
								if(!forceLooprow14) { // G 46
								
							
								 
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow14 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfSAIDA_VENDAS_PRODUTOS = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'copyOfSAIDA_VENDAS_PRODUTOS'
copyOfSAIDA_VENDAS_PRODUTOS_tmp.OrderDate = copyOfVENDAS.OrderDate ;
copyOfSAIDA_VENDAS_PRODUTOS_tmp.UnitPrice = copyOfVENDAS.UnitPrice ;
copyOfSAIDA_VENDAS_PRODUTOS_tmp.OrderQty = copyOfVENDAS.OrderQty ;
copyOfSAIDA_VENDAS_PRODUTOS_tmp.Name = row14.Name ;
copyOfSAIDA_VENDAS_PRODUTOS_tmp.ShipToAddressID = copyOfVENDAS.ShipToAddressID ;
copyOfSAIDA_VENDAS_PRODUTOS_tmp.CustomerID = copyOfVENDAS.CustomerID ;
copyOfSAIDA_VENDAS_PRODUTOS = copyOfSAIDA_VENDAS_PRODUTOS_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfSAIDA_VENDAS_PRODUTOS"
if(copyOfSAIDA_VENDAS_PRODUTOS != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfSAIDA_VENDAS_PRODUTOS");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row15HashKey.AddressID = copyOfSAIDA_VENDAS_PRODUTOS.ShipToAddressID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.AddressID = '" + row15HashKey.AddressID + "'");
								} // G 071
							

							row15Struct row15 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfSAIDA_VENDAS_REGIAO = null;


// # Output table : 'copyOfSAIDA_VENDAS_REGIAO'
copyOfSAIDA_VENDAS_REGIAO_tmp.OrderDate = copyOfSAIDA_VENDAS_PRODUTOS.OrderDate ;
copyOfSAIDA_VENDAS_REGIAO_tmp.UnitPrice = copyOfSAIDA_VENDAS_PRODUTOS.UnitPrice ;
copyOfSAIDA_VENDAS_REGIAO_tmp.OrderQty = copyOfSAIDA_VENDAS_PRODUTOS.OrderQty ;
copyOfSAIDA_VENDAS_REGIAO_tmp.Name = copyOfSAIDA_VENDAS_PRODUTOS.Name ;
copyOfSAIDA_VENDAS_REGIAO_tmp.CountryRegion = row15.CountryRegion ;
copyOfSAIDA_VENDAS_REGIAO_tmp.CustomerID = copyOfSAIDA_VENDAS_PRODUTOS.CustomerID ;
copyOfSAIDA_VENDAS_REGIAO = copyOfSAIDA_VENDAS_REGIAO_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfSAIDA_VENDAS_REGIAO"
if(copyOfSAIDA_VENDAS_REGIAO != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfSAIDA_VENDAS_REGIAO");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row16HashKey.CustomerID = copyOfSAIDA_VENDAS_REGIAO.CustomerID ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
	
		  								forceLooprow16 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow16 = true;
			           		  	} // G 21
                    		  	
                    		

							row16Struct row16 = null;
                    		  	 
							

								while ((tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) || forceLooprow16) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row16'
									
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								
								if(!forceLooprow16) { // G 46
								
							
								 
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow16 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

SAIDA_VENDEDOR_MENSAL = null;

if(!rejectedInnerJoin_tMap_9 ) {

// # Output table : 'SAIDA_VENDEDOR_MENSAL'
SAIDA_VENDEDOR_MENSAL_tmp.OrderDate = copyOfSAIDA_VENDAS_REGIAO.OrderDate ;
SAIDA_VENDEDOR_MENSAL_tmp.UnitPrice = copyOfSAIDA_VENDAS_REGIAO.UnitPrice ;
SAIDA_VENDEDOR_MENSAL_tmp.OrderQty = copyOfSAIDA_VENDAS_REGIAO.OrderQty ;
SAIDA_VENDEDOR_MENSAL_tmp.Name = copyOfSAIDA_VENDAS_REGIAO.Name ;
SAIDA_VENDEDOR_MENSAL_tmp.CountryRegion = copyOfSAIDA_VENDAS_REGIAO.CountryRegion ;
SAIDA_VENDEDOR_MENSAL_tmp.SalesPerson = row16.SalesPerson ;
SAIDA_VENDEDOR_MENSAL = SAIDA_VENDEDOR_MENSAL_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "SAIDA_VENDEDOR_MENSAL"
if(SAIDA_VENDEDOR_MENSAL != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA_VENDEDOR_MENSAL");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(SAIDA_VENDEDOR_MENSAL.OrderDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(SAIDA_VENDEDOR_MENSAL.OrderDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(SAIDA_VENDEDOR_MENSAL.UnitPrice != null) {
                        sb_tFileOutputDelimited_4.append(
                            SAIDA_VENDEDOR_MENSAL.UnitPrice
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(SAIDA_VENDEDOR_MENSAL.OrderQty != null) {
                        sb_tFileOutputDelimited_4.append(
                            SAIDA_VENDEDOR_MENSAL.OrderQty
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(SAIDA_VENDEDOR_MENSAL.Name != null) {
                        sb_tFileOutputDelimited_4.append(
                            SAIDA_VENDEDOR_MENSAL.Name
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(SAIDA_VENDEDOR_MENSAL.CountryRegion != null) {
                        sb_tFileOutputDelimited_4.append(
                            SAIDA_VENDEDOR_MENSAL.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(SAIDA_VENDEDOR_MENSAL.SalesPerson != null) {
                        sb_tFileOutputDelimited_4.append(
                            SAIDA_VENDEDOR_MENSAL.SalesPerson
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "SAIDA_VENDEDOR_MENSAL"



	
		} // close loop of lookup 'row16' // G_TM_M_043
	
	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "copyOfSAIDA_VENDAS_REGIAO"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "copyOfSAIDA_VENDAS_PRODUTOS"



	
		} // close loop of lookup 'row14' // G_TM_M_043
	
	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "copyOfVENDAS"



	
		} // close loop of lookup 'row13' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	


				nb_line_tFileInputDelimited_8++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_8!=null){
    					csvReadertFileInputDelimited_8.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_8!=null){
    				globalMap.put("tFileInputDelimited_8_NB_LINE",nb_line_tFileInputDelimited_8);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfVENDAS");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfSAIDA_VENDAS_PRODUTOS");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfSAIDA_VENDAS_REGIAO");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA_VENDEDOR_MENSAL");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer SalesOrderDetailID;

				public Integer getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Float UnitPriceDiscount;

				public Float getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public Float LineTotal;

				public Float getLineTotal () {
					return this.LineTotal;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SalesOrderID == null) ? 0 : this.SalesOrderID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.SalesOrderID == null) {
							if (other.SalesOrderID != null)
								return false;
						
						} else if (!this.SalesOrderID.equals(other.SalesOrderID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SalesOrderDetailID = readInteger(dis,ois);
					
						this.OrderQty = readInteger(dis,ois);
					
						this.ProductID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPriceDiscount = null;
           				} else {
           			    	this.UnitPriceDiscount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LineTotal = null;
           				} else {
           			    	this.LineTotal = dis.readFloat();
           				}
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SalesOrderDetailID, dos, oos);
					
					writeInteger(this.OrderQty, dos, oos);
					
					writeInteger(this.ProductID, dos, oos);
					
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
						if(this.UnitPriceDiscount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPriceDiscount);
		            	}
					
						if(this.LineTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LineTotal);
		            	}
					
						writeString(this.rowguid, dos, oos);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tFileInputDelimited_9 - inputs:(after_tFileInputDelimited_8) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_6 - inputs:(row12,row13) outputs:(copyOfVENDAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_9", false);
		start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_9";

	
		int tos_count_tFileInputDelimited_9 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try{
					
						Object filename_tFileInputDelimited_9 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV";
						if(filename_tFileInputDelimited_9 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
			if(footer_value_tFileInputDelimited_9 >0 || random_value_tFileInputDelimited_9 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_9
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_9!=null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();
						
			    						row13 = null;			
									
			    						row13 = null;			
												
									boolean whetherReject_tFileInputDelimited_9 = false;
									row13 = new row13Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_9 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_9 = 0;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.SalesOrderID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.SalesOrderID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 1;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.SalesOrderDetailID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.SalesOrderDetailID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 2;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.OrderQty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.OrderQty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 3;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 4;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.UnitPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPrice", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.UnitPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 5;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.UnitPriceDiscount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPriceDiscount", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.UnitPriceDiscount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 6;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row13.LineTotal = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.LineTotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 7;
					
							row13.rowguid = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 8;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    									row13.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row13", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									row13.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_9.getException()!=null) {
											throw rowstate_tFileInputDelimited_9.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_9 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row13 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_9 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 


	tos_count_tFileInputDelimited_9++;

/**
 * [tFileInputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.SalesOrderID = row13.SalesOrderID;
				
				row13_HashRow.SalesOrderDetailID = row13.SalesOrderDetailID;
				
				row13_HashRow.OrderQty = row13.OrderQty;
				
				row13_HashRow.ProductID = row13.ProductID;
				
				row13_HashRow.UnitPrice = row13.UnitPrice;
				
				row13_HashRow.UnitPriceDiscount = row13.UnitPriceDiscount;
				
				row13_HashRow.LineTotal = row13.LineTotal;
				
				row13_HashRow.rowguid = row13.rowguid;
				
				row13_HashRow.ModifiedDate = row13.ModifiedDate;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tFileInputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_9!=null){
                		fid_tFileInputDelimited_9.close();
                	}
                }
                if(fid_tFileInputDelimited_9!=null){
                	globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_9", true);
end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());




/**
 * [tFileInputDelimited_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Float StandardCost;

				public Float getStandardCost () {
					return this.StandardCost;
				}
				
			    public Float ListPrice;

				public Float getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Weight;

				public String getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public String ThumbNailPhoto;

				public String getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductID == null) ? 0 : this.ProductID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.ProductID == null) {
							if (other.ProductID != null)
								return false;
						
						} else if (!this.ProductID.equals(other.ProductID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ThumbNailPhoto = this.ThumbNailPhoto;
	            other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.ProductID = this.ProductID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.ProductNumber = readString(dis,ois);
					
						this.Color = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ListPrice = null;
           				} else {
           			    	this.ListPrice = dis.readFloat();
           				}
					
						this.Size = readString(dis,ois);
					
						this.Weight = readString(dis,ois);
					
						this.ProductCategoryID = readInteger(dis,ois);
					
						this.ProductModelID = readInteger(dis,ois);
					
						this.SellStartDate = readString(dis,ois);
					
						this.SellEndDate = readString(dis,ois);
					
						this.DiscontinuedDate = readString(dis,ois);
					
						this.ThumbNailPhoto = readString(dis,ois);
					
						this.ThumbnailPhotoFileName = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.ProductNumber, dos, oos);
					
						writeString(this.Color, dos, oos);
					
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.StandardCost);
		            	}
					
						if(this.ListPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ListPrice);
		            	}
					
						writeString(this.Size, dos, oos);
					
						writeString(this.Weight, dos, oos);
					
					writeInteger(this.ProductCategoryID, dos, oos);
					
					writeInteger(this.ProductModelID, dos, oos);
					
						writeString(this.SellStartDate, dos, oos);
					
						writeString(this.SellEndDate, dos, oos);
					
						writeString(this.DiscontinuedDate, dos, oos);
					
						writeString(this.ThumbNailPhoto, dos, oos);
					
						writeString(this.ThumbnailPhotoFileName, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeString(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+Weight);
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
		sb.append(",ThumbNailPhoto="+ThumbNailPhoto);
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tFileInputDelimited_10 - inputs:(after_tFileInputDelimited_8) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_7 - inputs:(copyOfVENDAS,row14) outputs:(copyOfSAIDA_VENDAS_PRODUTOS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_10", false);
		start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_10";

	
		int tos_count_tFileInputDelimited_10 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try{
					
						Object filename_tFileInputDelimited_10 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV";
						if(filename_tFileInputDelimited_10 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
			if(footer_value_tFileInputDelimited_10 >0 || random_value_tFileInputDelimited_10 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_10
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_10!=null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();
						
			    						row14 = null;			
									
			    						row14 = null;			
												
									boolean whetherReject_tFileInputDelimited_10 = false;
									row14 = new row14Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_10 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_10 = 0;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row14.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row14", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row14.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 1;
					
							row14.Name = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 2;
					
							row14.ProductNumber = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 3;
					
							row14.Color = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 4;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row14.StandardCost = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"StandardCost", "row14", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row14.StandardCost = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 5;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row14.ListPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ListPrice", "row14", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row14.ListPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 6;
					
							row14.Size = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 7;
					
							row14.Weight = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 8;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row14.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row14", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row14.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 9;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row14.ProductModelID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row14", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row14.ProductModelID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 10;
					
							row14.SellStartDate = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 11;
					
							row14.SellEndDate = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 12;
					
							row14.DiscontinuedDate = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 13;
					
							row14.ThumbNailPhoto = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 14;
					
							row14.ThumbnailPhotoFileName = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 15;
					
							row14.rowguid = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 16;
					
							row14.ModifiedDate = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
				
										
										if(rowstate_tFileInputDelimited_10.getException()!=null) {
											throw rowstate_tFileInputDelimited_10.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_10 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row14 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_10 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 


	tos_count_tFileInputDelimited_10++;

/**
 * [tFileInputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.ProductID = row14.ProductID;
				
				row14_HashRow.Name = row14.Name;
				
				row14_HashRow.ProductNumber = row14.ProductNumber;
				
				row14_HashRow.Color = row14.Color;
				
				row14_HashRow.StandardCost = row14.StandardCost;
				
				row14_HashRow.ListPrice = row14.ListPrice;
				
				row14_HashRow.Size = row14.Size;
				
				row14_HashRow.Weight = row14.Weight;
				
				row14_HashRow.ProductCategoryID = row14.ProductCategoryID;
				
				row14_HashRow.ProductModelID = row14.ProductModelID;
				
				row14_HashRow.SellStartDate = row14.SellStartDate;
				
				row14_HashRow.SellEndDate = row14.SellEndDate;
				
				row14_HashRow.DiscontinuedDate = row14.DiscontinuedDate;
				
				row14_HashRow.ThumbNailPhoto = row14.ThumbNailPhoto;
				
				row14_HashRow.ThumbnailPhotoFileName = row14.ThumbnailPhotoFileName;
				
				row14_HashRow.rowguid = row14.rowguid;
				
				row14_HashRow.ModifiedDate = row14.ModifiedDate;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFileInputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_10!=null){
                		fid_tFileInputDelimited_10.close();
                	}
                }
                if(fid_tFileInputDelimited_10!=null){
                	globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_10", true);
end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());




/**
 * [tFileInputDelimited_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AddressID;

				public Integer getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AddressID == null) ? 0 : this.AddressID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.AddressID == null) {
							if (other.AddressID != null)
								return false;
						
						} else if (!this.AddressID.equals(other.AddressID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.PostalCode = this.PostalCode;
	            other.CountryRegion = this.CountryRegion;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.AddressID = this.AddressID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.AddressID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AddressID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AddressLine1 = readString(dis,ois);
					
						this.AddressLine2 = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this.PostalCode = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.AddressLine1, dos, oos);
					
						writeString(this.AddressLine2, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this.PostalCode, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeString(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tFileInputDelimited_11 - inputs:(after_tFileInputDelimited_8) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_8 - inputs:(copyOfSAIDA_VENDAS_PRODUTOS,row15) outputs:(copyOfSAIDA_VENDAS_REGIAO)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_11", false);
		start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_11";

	
		int tos_count_tFileInputDelimited_11 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_11 = 0;
				int footer_tFileInputDelimited_11 = 0;
				int totalLinetFileInputDelimited_11 = 0;
				int limittFileInputDelimited_11 = -1;
				int lastLinetFileInputDelimited_11 = -1;	
				
				char fieldSeparator_tFileInputDelimited_11[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_11 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_11[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_11 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_11 = /** Start field tFileInputDelimited_11:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_ADDRESS.CSV"/** End field tFileInputDelimited_11:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_11 = null;
	
				try{
					
						String[] rowtFileInputDelimited_11=null;
						int currentLinetFileInputDelimited_11 = 0;
	        			int outputLinetFileInputDelimited_11 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_11 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_11 = 0;
			if(footer_value_tFileInputDelimited_11 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_11=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_11, fieldSeparator_tFileInputDelimited_11[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_11=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_11)),"US-ASCII")), fieldSeparator_tFileInputDelimited_11[0]);
		        			}
					
					
					csvReadertFileInputDelimited_11.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_11[0] != '\n') && (rowSeparator_tFileInputDelimited_11[0] != '\r') )
	        			csvReadertFileInputDelimited_11.setLineEnd(""+rowSeparator_tFileInputDelimited_11[0]);
						
	        				csvReadertFileInputDelimited_11.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_11.setEscapeChar(csvReadertFileInputDelimited_11.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_11 > 0){
						for(totalLinetFileInputDelimited_11=0;totalLinetFileInputDelimited_11 < 1; totalLinetFileInputDelimited_11++){
							csvReadertFileInputDelimited_11.readNext();
						}
						csvReadertFileInputDelimited_11.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_11.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_11++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_11 = totalLinetFileInputDelimited_11 - footer_tFileInputDelimited_11   < 0? 0 : totalLinetFileInputDelimited_11 - footer_tFileInputDelimited_11 ;
	            		if(lastLinetFileInputDelimited_11 > 0){
	                		lastLinetFileInputDelimited_11 = lastLinetFileInputDelimited_11 < lastLineTemptFileInputDelimited_11 ? lastLinetFileInputDelimited_11 : lastLineTemptFileInputDelimited_11; 
	            		}else {
	                		lastLinetFileInputDelimited_11 = lastLineTemptFileInputDelimited_11;
	            		}
	         
			          	csvReadertFileInputDelimited_11.close();
				        if(filename_tFileInputDelimited_11 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_11=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_11, fieldSeparator_tFileInputDelimited_11[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_11=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_11)),"US-ASCII")), fieldSeparator_tFileInputDelimited_11[0]);
						}
						csvReadertFileInputDelimited_11.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_11[0] != '\n') && (rowSeparator_tFileInputDelimited_11[0] != '\r') )	
	        				csvReadertFileInputDelimited_11.setLineEnd(""+rowSeparator_tFileInputDelimited_11[0]);
						
							csvReadertFileInputDelimited_11.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_11.setEscapeChar(csvReadertFileInputDelimited_11.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_11 != 0){
			        	for(currentLinetFileInputDelimited_11=0;currentLinetFileInputDelimited_11 < 1;currentLinetFileInputDelimited_11++){
			        		csvReadertFileInputDelimited_11.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_11.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_11 != 0 && csvReadertFileInputDelimited_11!=null && csvReadertFileInputDelimited_11.readNext() ) { 
	        		rowstate_tFileInputDelimited_11.reset();
	        
		        	rowtFileInputDelimited_11=csvReadertFileInputDelimited_11.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_11++;
	            
		            if(lastLinetFileInputDelimited_11 > -1 && currentLinetFileInputDelimited_11 > lastLinetFileInputDelimited_11) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_11++;
	            	if (limittFileInputDelimited_11 > 0 && outputLinetFileInputDelimited_11 > limittFileInputDelimited_11) {
	                	break;
	            	}  
	                                                                      
					
	    							row15 = null;			
								
	    							row15 = null;			
								
								boolean whetherReject_tFileInputDelimited_11 = false;
								row15 = new row15Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_11_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_11_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_11.length == 1 && ("\015").equals(rowtFileInputDelimited_11[0])){//empty line when row separator is '\n'
					
							row15.AddressID = null;
					
							row15.AddressLine1 = null;
					
							row15.AddressLine2 = null;
					
							row15.City = null;
					
							row15.PostalCode = null;
					
							row15.CountryRegion = null;
					
							row15.rowguid = null;
					
							row15.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_11 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_11 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
								
									if(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11].length() > 0) {
										try {
									
										row15.AddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_11) {
											rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AddressID", "row15", rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11], ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
										}
    								}else{
    									
											
												row15.AddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row15.AddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.AddressLine1 = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.AddressLine1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.AddressLine2 = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.AddressLine2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.City = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.City = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.PostalCode = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.PostalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.CountryRegion = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.CountryRegion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.rowguid = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_11 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length){
						
						
							
									row15.ModifiedDate = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];
									
							
						
						}else{
						
							
								row15.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_11.getException()!=null) {
										throw rowstate_tFileInputDelimited_11.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_11 = true;
        							
                							System.err.println(e.getMessage());
                							row15 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_11 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 


	tos_count_tFileInputDelimited_11++;

/**
 * [tFileInputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.AddressID = row15.AddressID;
				
				row15_HashRow.AddressLine1 = row15.AddressLine1;
				
				row15_HashRow.AddressLine2 = row15.AddressLine2;
				
				row15_HashRow.City = row15.City;
				
				row15_HashRow.PostalCode = row15.PostalCode;
				
				row15_HashRow.CountryRegion = row15.CountryRegion;
				
				row15_HashRow.rowguid = row15.rowguid;
				
				row15_HashRow.ModifiedDate = row15.ModifiedDate;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tFileInputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	


				nb_line_tFileInputDelimited_11++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_11 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_11!=null){
    					csvReadertFileInputDelimited_11.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_11!=null){
    				globalMap.put("tFileInputDelimited_11_NB_LINE",nb_line_tFileInputDelimited_11);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_11", true);
end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());




/**
 * [tFileInputDelimited_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_CURATED = new byte[0];
    static byte[] commonByteArray_DATA_OPS_CURATED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.CustomerID = this.CustomerID;
	            other.SalesPerson = this.SalesPerson;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_CURATED) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SalesPerson = readString(dis,ois);
					
						this.rowguid = readString(dis,ois);
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SalesPerson, dos, oos);
					
						writeString(this.rowguid, dos, oos);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tFileInputDelimited_12 - inputs:(after_tFileInputDelimited_8) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_9 - inputs:(copyOfSAIDA_VENDAS_REGIAO,row16) outputs:(SAIDA_VENDEDOR_MENSAL)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_12", false);
		start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_12";

	
		int tos_count_tFileInputDelimited_12 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				int limit_tFileInputDelimited_12 = -1;
				try{
					
						Object filename_tFileInputDelimited_12 = "D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV";
						if(filename_tFileInputDelimited_12 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
			if(footer_value_tFileInputDelimited_12 >0 || random_value_tFileInputDelimited_12 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_12
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_12!=null && fid_tFileInputDelimited_12.nextRecord()) {
						rowstate_tFileInputDelimited_12.reset();
						
			    						row16 = null;			
									
			    						row16 = null;			
												
									boolean whetherReject_tFileInputDelimited_12 = false;
									row16 = new row16Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_12 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_12 = 0;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								row16.CustomerID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row16", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									row16.CustomerID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 1;
					
							row16.SalesPerson = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 2;
					
							row16.rowguid = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 3;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    									row16.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row16", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									row16.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_12.getException()!=null) {
											throw rowstate_tFileInputDelimited_12.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_12 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row16 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_12 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 


	tos_count_tFileInputDelimited_12++;

/**
 * [tFileInputDelimited_12 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.CustomerID = row16.CustomerID;
				
				row16_HashRow.SalesPerson = row16.SalesPerson;
				
				row16_HashRow.rowguid = row16.rowguid;
				
				row16_HashRow.ModifiedDate = row16.ModifiedDate;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputDelimited_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_12!=null){
                		fid_tFileInputDelimited_12.close();
                	}
                }
                if(fid_tFileInputDelimited_12!=null){
                	globalMap.put("tFileInputDelimited_12_NB_LINE", fid_tFileInputDelimited_12.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_12", true);
end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());




/**
 * [tFileInputDelimited_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_12 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CURATED CURATEDClass = new CURATED();

        int exitCode = CURATEDClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CURATED.class.getClassLoader().getResourceAsStream("data_ops/curated_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CURATED.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_4.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_8.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CURATED");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     622966 characters generated by Talend Open Studio for Big Data 
 *     on the 2 de Maio de 2021 16h31min17s BRT
 ************************************************************************************************/