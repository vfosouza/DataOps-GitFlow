// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package data_ops.har_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: HAR Purpose: <br>
 * Description: Camada Harmonized <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HAR implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "HAR";
	private final String projectName = "DATA_OPS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HAR.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HAR.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Title="+Title);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_CLIENTES.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[10];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="CustomerID";
                                    headColutFileOutputDelimited_1[1]="Title";
                                    headColutFileOutputDelimited_1[2]="Suffix";
                                    headColutFileOutputDelimited_1[3]="CompanyName";
                                    headColutFileOutputDelimited_1[4]="SalesPerson";
                                    headColutFileOutputDelimited_1[5]="EmailAddress";
                                    headColutFileOutputDelimited_1[6]="PasswordHash";
                                    headColutFileOutputDelimited_1[7]="PasswordSalt";
                                    headColutFileOutputDelimited_1[8]="rowguid";
                                    headColutFileOutputDelimited_1[9]="ModifiedDate";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_CUSTOMER.CSV"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.CustomerID = null;
					
							row1.Title = null;
					
							row1.Suffix = null;
					
							row1.CompanyName = null;
					
							row1.SalesPerson = null;
					
							row1.EmailAddress = null;
					
							row1.PasswordHash = null;
					
							row1.PasswordSalt = null;
					
							row1.rowguid = null;
					
							row1.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Title = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Title = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Suffix = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Suffix = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CompanyName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CompanyName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SalesPerson = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SalesPerson = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.EmailAddress = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.EmailAddress = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PasswordHash = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PasswordHash = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PasswordSalt = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PasswordSalt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.rowguid = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.ModifiedDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ModifiedDate", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ModifiedDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


                        String[] rowtFileOutputDelimited_1=new String[10];
                            rowtFileOutputDelimited_1[0]=row1.CustomerID == null ? null : String.valueOf(row1.CustomerID);
                            rowtFileOutputDelimited_1[1]=row1.Title == null ? null : row1.Title;
                            rowtFileOutputDelimited_1[2]=row1.Suffix == null ? null : row1.Suffix;
                            rowtFileOutputDelimited_1[3]=row1.CompanyName == null ? null : row1.CompanyName;
                            rowtFileOutputDelimited_1[4]=row1.SalesPerson == null ? null : row1.SalesPerson;
                            rowtFileOutputDelimited_1[5]=row1.EmailAddress == null ? null : row1.EmailAddress;
                            rowtFileOutputDelimited_1[6]=row1.PasswordHash == null ? null : row1.PasswordHash;
                            rowtFileOutputDelimited_1[7]=row1.PasswordSalt == null ? null : row1.PasswordSalt;
                            rowtFileOutputDelimited_1[8]=row1.rowguid == null ? null : row1.rowguid;
                            rowtFileOutputDelimited_1[9]=row1.ModifiedDate == null ? null : FormatterUtils.format_Date(row1.ModifiedDate, "dd-MM-yyyy");
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Float StandardCost;

				public Float getStandardCost () {
					return this.StandardCost;
				}
				
			    public Float ListPrice;

				public Float getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Weight;

				public String getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public String ThumbNailPhoto;

				public String getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ListPrice = null;
           				} else {
           			    	this.ListPrice = dis.readFloat();
           				}
					
					this.Size = readString(dis);
					
					this.Weight = readString(dis);
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readString(dis);
					
					this.SellEndDate = readString(dis);
					
					this.DiscontinuedDate = readString(dis);
					
					this.ThumbNailPhoto = readString(dis);
					
					this.ThumbnailPhotoFileName = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Float
				
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.StandardCost);
		            	}
					
					// Float
				
						if(this.ListPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ListPrice);
		            	}
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Weight,dos);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.SellStartDate,dos);
					
					// String
				
						writeString(this.SellEndDate,dos);
					
					// String
				
						writeString(this.DiscontinuedDate,dos);
					
					// String
				
						writeString(this.ThumbNailPhoto,dos);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+Weight);
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
		sb.append(",ThumbNailPhoto="+ThumbNailPhoto);
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_PRODUTOS.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("ProductID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductNumber");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Color");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("StandardCost");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ListPrice");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Size");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Weight");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductCategoryID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductModelID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SellStartDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SellEndDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DiscontinuedDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ThumbNailPhoto");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ThumbnailPhotoFileName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("rowguid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ModifiedDate");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "D:/DATA_OPS_PROJETO/RAW/FF_PRODUCT.CSV";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/RAW/FF_PRODUCT.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row2.Name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row2.ProductNumber = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row2.Color = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.StandardCost = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"StandardCost", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.StandardCost = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.ListPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ListPrice", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.ListPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row2.Size = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row2.Weight = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.ProductModelID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.ProductModelID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row2.SellStartDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row2.SellEndDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row2.DiscontinuedDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row2.ThumbNailPhoto = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row2.ThumbnailPhotoFileName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
							row2.rowguid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							row2.ModifiedDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row2.ProductID != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ProductID
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ProductNumber != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ProductNumber
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.Color != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.Color
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.StandardCost != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.StandardCost
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ListPrice != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ListPrice
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.Size != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.Size
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.Weight != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.Weight
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ProductCategoryID != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ProductCategoryID
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ProductModelID != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ProductModelID
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.SellStartDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.SellStartDate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.SellEndDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.SellEndDate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.DiscontinuedDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.DiscontinuedDate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ThumbNailPhoto != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ThumbNailPhoto
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ThumbnailPhotoFileName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ThumbnailPhotoFileName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.rowguid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.ModifiedDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.ModifiedDate
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/RAW/FF_PRODUCT.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer RevisionNumber;

				public Integer getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public Boolean OnlineOrderFlag;

				public Boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public Integer Status;

				public Integer getStatus () {
					return this.Status;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Float SubTotal;

				public Float getSubTotal () {
					return this.SubTotal;
				}
				
			    public Float TaxAmt;

				public Float getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public Float Freight;

				public Float getFreight () {
					return this.Freight;
				}
				
			    public Float TotalDue;

				public Float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
						this.RevisionNumber = readInteger(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineOrderFlag = null;
           				} else {
           			    	this.OnlineOrderFlag = dis.readBoolean();
           				}
					
					this.ShipDate = readString(dis);
					
						this.Status = readInteger(dis);
					
					this.SalesOrderNumber = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SubTotal = null;
           				} else {
           			    	this.SubTotal = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TaxAmt = null;
           				} else {
           			    	this.TaxAmt = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Freight = null;
           				} else {
           			    	this.Freight = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalDue = null;
           				} else {
           			    	this.TotalDue = dis.readFloat();
           				}
					
					this.Comment = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// Integer
				
						writeInteger(this.RevisionNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// Boolean
				
						if(this.OnlineOrderFlag == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineOrderFlag);
		            	}
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// Integer
				
						writeInteger(this.Status,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Float
				
						if(this.SubTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SubTotal);
		            	}
					
					// Float
				
						if(this.TaxAmt == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TaxAmt);
		            	}
					
					// Float
				
						if(this.Freight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Freight);
		            	}
					
					// Float
				
						if(this.TotalDue == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalDue);
		            	}
					
					// String
				
						writeString(this.Comment,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+DueDate);
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
                String[] headColutFileOutputDelimited_3=new String[20];
            class CSVBasicSet_tFileOutputDelimited_3{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_3[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_3 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_3[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_3 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_3[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_3[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_3 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 =0;
            int currentRow_tFileOutputDelimited_3 = 0;


            CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
            csvSettings_tFileOutputDelimited_3.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                            if(fileToDelete_tFileOutputDelimited_3.exists()) {
                                fileToDelete_tFileOutputDelimited_3.delete();
                            }
                            CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "US-ASCII")));
                            CsvWritertFileOutputDelimited_3.setSeparator(csvSettings_tFileOutputDelimited_3.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_3.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_3.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_3.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_3.setLineEnd(""+csvSettings_tFileOutputDelimited_3.getRowDelim());
                    }
                        if(filetFileOutputDelimited_3.length()==0){
                                    headColutFileOutputDelimited_3[0]="SalesOrderID";
                                    headColutFileOutputDelimited_3[1]="RevisionNumber";
                                    headColutFileOutputDelimited_3[2]="OrderDate";
                                    headColutFileOutputDelimited_3[3]="DueDate";
                                    headColutFileOutputDelimited_3[4]="OnlineOrderFlag";
                                    headColutFileOutputDelimited_3[5]="ShipDate";
                                    headColutFileOutputDelimited_3[6]="Status";
                                    headColutFileOutputDelimited_3[7]="SalesOrderNumber";
                                    headColutFileOutputDelimited_3[8]="CustomerID";
                                    headColutFileOutputDelimited_3[9]="ShipToAddressID";
                                    headColutFileOutputDelimited_3[10]="BillToAddressID";
                                    headColutFileOutputDelimited_3[11]="ShipMethod";
                                    headColutFileOutputDelimited_3[12]="CreditCardApprovalCode";
                                    headColutFileOutputDelimited_3[13]="SubTotal";
                                    headColutFileOutputDelimited_3[14]="TaxAmt";
                                    headColutFileOutputDelimited_3[15]="Freight";
                                    headColutFileOutputDelimited_3[16]="TotalDue";
                                    headColutFileOutputDelimited_3[17]="Comment";
                                    headColutFileOutputDelimited_3[18]="rowguid";
                                    headColutFileOutputDelimited_3[19]="ModifiedDate";
                            CsvWritertFileOutputDelimited_3.writeNext(headColutFileOutputDelimited_3);
                            CsvWritertFileOutputDelimited_3.flush();
                        }
                CsvWritertFileOutputDelimited_3.setEscapeChar(csvSettings_tFileOutputDelimited_3.getEscapeChar());
                CsvWritertFileOutputDelimited_3.setQuoteChar(csvSettings_tFileOutputDelimited_3.getTextEnclosure());
                CsvWritertFileOutputDelimited_3.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_3", CsvWritertFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;	
				
				char fieldSeparator_tFileInputDelimited_3[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_3[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_3 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_SALES_ORDER_HEADER.CSV"/** End field tFileInputDelimited_3:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;
	
				try{
					
						String[] rowtFileInputDelimited_3=null;
						int currentLinetFileInputDelimited_3 = 0;
	        			int outputLinetFileInputDelimited_3 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0;
			if(footer_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"US-ASCII")), fieldSeparator_tFileInputDelimited_3[0]);
		        			}
					
					
					csvReadertFileInputDelimited_3.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )
	        			csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
	        				csvReadertFileInputDelimited_3.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_3 > 0){
						for(totalLinetFileInputDelimited_3=0;totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++){
							csvReadertFileInputDelimited_3.readNext();
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_3.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_3++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3   < 0? 0 : totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3 ;
	            		if(lastLinetFileInputDelimited_3 > 0){
	                		lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3 : lastLineTemptFileInputDelimited_3; 
	            		}else {
	                		lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
	            		}
	         
			          	csvReadertFileInputDelimited_3.close();
				        if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"US-ASCII")), fieldSeparator_tFileInputDelimited_3[0]);
						}
						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )	
	        				csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
							csvReadertFileInputDelimited_3.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_3 != 0){
			        	for(currentLinetFileInputDelimited_3=0;currentLinetFileInputDelimited_3 < 1;currentLinetFileInputDelimited_3++){
			        		csvReadertFileInputDelimited_3.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3!=null && csvReadertFileInputDelimited_3.readNext() ) { 
	        		rowstate_tFileInputDelimited_3.reset();
	        
		        	rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_3++;
	            
		            if(lastLinetFileInputDelimited_3 > -1 && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_3++;
	            	if (limittFileInputDelimited_3 > 0 && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
	                	break;
	            	}  
	                                                                      
					
	    							row3 = null;			
								
								boolean whetherReject_tFileInputDelimited_3 = false;
								row3 = new row3Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row3.SalesOrderID = null;
					
							row3.RevisionNumber = null;
					
							row3.OrderDate = null;
					
							row3.DueDate = null;
					
							row3.OnlineOrderFlag = null;
					
							row3.ShipDate = null;
					
							row3.Status = null;
					
							row3.SalesOrderNumber = null;
					
							row3.CustomerID = null;
					
							row3.ShipToAddressID = null;
					
							row3.BillToAddressID = null;
					
							row3.ShipMethod = null;
					
							row3.CreditCardApprovalCode = null;
					
							row3.SubTotal = null;
					
							row3.TaxAmt = null;
					
							row3.Freight = null;
					
							row3.TotalDue = null;
					
							row3.Comment = null;
					
							row3.rowguid = null;
					
							row3.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.SalesOrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderID", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.SalesOrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.RevisionNumber = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RevisionNumber", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.RevisionNumber = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.RevisionNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
											row3.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.DueDate = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.DueDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.OnlineOrderFlag = ParserUtils.parseTo_Boolean(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OnlineOrderFlag", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.OnlineOrderFlag = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.ShipDate = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.ShipDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.Status = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Status", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.Status = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.SalesOrderNumber = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.SalesOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.ShipToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipToAddressID", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.ShipToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.ShipToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.BillToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BillToAddressID", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.BillToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.BillToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.ShipMethod = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.ShipMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.CreditCardApprovalCode = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.CreditCardApprovalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.SubTotal = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SubTotal", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.SubTotal = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.SubTotal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.TaxAmt = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TaxAmt", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.TaxAmt = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.TaxAmt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.Freight = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Freight", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.Freight = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.Freight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.TotalDue = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TotalDue", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.TotalDue = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.TotalDue = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.Comment = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.Comment = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.rowguid = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.ModifiedDate = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_3.getException()!=null) {
										throw rowstate_tFileInputDelimited_3.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_3 = true;
        							
                							System.err.println(e.getMessage());
                							row3 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


                        String[] rowtFileOutputDelimited_3=new String[20];
                            rowtFileOutputDelimited_3[0]=row3.SalesOrderID == null ? null : String.valueOf(row3.SalesOrderID);
                            rowtFileOutputDelimited_3[1]=row3.RevisionNumber == null ? null : String.valueOf(row3.RevisionNumber);
                            rowtFileOutputDelimited_3[2]=row3.OrderDate == null ? null : FormatterUtils.format_Date(row3.OrderDate, "dd-MM-yyyy");
                            rowtFileOutputDelimited_3[3]=row3.DueDate == null ? null : row3.DueDate;
                            rowtFileOutputDelimited_3[4]=row3.OnlineOrderFlag == null ? null : String.valueOf(row3.OnlineOrderFlag);
                            rowtFileOutputDelimited_3[5]=row3.ShipDate == null ? null : row3.ShipDate;
                            rowtFileOutputDelimited_3[6]=row3.Status == null ? null : String.valueOf(row3.Status);
                            rowtFileOutputDelimited_3[7]=row3.SalesOrderNumber == null ? null : row3.SalesOrderNumber;
                            rowtFileOutputDelimited_3[8]=row3.CustomerID == null ? null : String.valueOf(row3.CustomerID);
                            rowtFileOutputDelimited_3[9]=row3.ShipToAddressID == null ? null : String.valueOf(row3.ShipToAddressID);
                            rowtFileOutputDelimited_3[10]=row3.BillToAddressID == null ? null : String.valueOf(row3.BillToAddressID);
                            rowtFileOutputDelimited_3[11]=row3.ShipMethod == null ? null : row3.ShipMethod;
                            rowtFileOutputDelimited_3[12]=row3.CreditCardApprovalCode == null ? null : row3.CreditCardApprovalCode;
                            rowtFileOutputDelimited_3[13]=row3.SubTotal == null ? null : String.valueOf(row3.SubTotal);
                            rowtFileOutputDelimited_3[14]=row3.TaxAmt == null ? null : String.valueOf(row3.TaxAmt);
                            rowtFileOutputDelimited_3[15]=row3.Freight == null ? null : String.valueOf(row3.Freight);
                            rowtFileOutputDelimited_3[16]=row3.TotalDue == null ? null : String.valueOf(row3.TotalDue);
                            rowtFileOutputDelimited_3[17]=row3.Comment == null ? null : row3.Comment;
                            rowtFileOutputDelimited_3[18]=row3.rowguid == null ? null : row3.rowguid;
                            rowtFileOutputDelimited_3[19]=row3.ModifiedDate == null ? null : row3.ModifiedDate;
                nb_line_tFileOutputDelimited_3++;
                resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
                                       CsvWritertFileOutputDelimited_3.writeNext(rowtFileOutputDelimited_3);




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	


				nb_line_tFileInputDelimited_3++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_3!=null){
    					csvReadertFileInputDelimited_3.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_3!=null){
    				globalMap.put("tFileInputDelimited_3_NB_LINE",nb_line_tFileInputDelimited_3);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_3!=null) {
				    	CsvWritertFileOutputDelimited_3.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_3");
					
						if(CsvWritertFileOutputDelimited_3!=null) {
					    	CsvWritertFileOutputDelimited_3.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer SalesOrderDetailID;

				public Integer getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Float UnitPrice;

				public Float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Float UnitPriceDiscount;

				public Float getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public Float LineTotal;

				public Float getLineTotal () {
					return this.LineTotal;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
						this.SalesOrderDetailID = readInteger(dis);
					
						this.OrderQty = readInteger(dis);
					
						this.ProductID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPrice = null;
           				} else {
           			    	this.UnitPrice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UnitPriceDiscount = null;
           				} else {
           			    	this.UnitPriceDiscount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LineTotal = null;
           				} else {
           			    	this.LineTotal = dis.readFloat();
           				}
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// Integer
				
						writeInteger(this.SalesOrderDetailID,dos);
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// Float
				
						if(this.UnitPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPrice);
		            	}
					
					// Float
				
						if(this.UnitPriceDiscount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.UnitPriceDiscount);
		            	}
					
					// Float
				
						if(this.LineTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LineTotal);
		            	}
					
					// String
				
						writeString(this.rowguid,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDAS_DETALHE.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("SalesOrderID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("SalesOrderDetailID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("OrderQty");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ProductID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("UnitPrice");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("LineTotal");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("rowguid");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ModifiedDate");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = "D:/DATA_OPS_PROJETO/RAW/FF_SALES_ORDER_DETAIL.CSV";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited("D:/DATA_OPS_PROJETO/RAW/FF_SALES_ORDER_DETAIL.CSV", "US-ASCII",";","\n",false,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.SalesOrderID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.SalesOrderID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.SalesOrderDetailID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.SalesOrderDetailID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.OrderQty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.OrderQty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.ProductID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.ProductID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.UnitPrice = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPrice", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.UnitPrice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.UnitPriceDiscount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPriceDiscount", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.UnitPriceDiscount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row4.LineTotal = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.LineTotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row4.rowguid = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    									row4.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row4", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row4.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row4.SalesOrderID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.SalesOrderID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.SalesOrderDetailID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.SalesOrderDetailID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.OrderQty != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.OrderQty
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.ProductID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.ProductID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.UnitPrice != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.UnitPrice
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.UnitPriceDiscount != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.UnitPriceDiscount
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.LineTotal != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.LineTotal
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.rowguid != null) {
                        sb_tFileOutputDelimited_4.append(
                            row4.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row4.ModifiedDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(row4.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)("D:/DATA_OPS_PROJETO/RAW/FF_SALES_ORDER_DETAIL.CSV") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.SalesPerson = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Title="+Title);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_VENDEDOR.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        if(fileToDelete_tFileOutputDelimited_5.exists()) {
                            fileToDelete_tFileOutputDelimited_5.delete();
                        }
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false),"UTF-8"));
                                    if(filetFileOutputDelimited_5.length()==0){
                                        outtFileOutputDelimited_5.write("CustomerID");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("SalesPerson");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("rowguid");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("ModifiedDate");
                                        outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tFilterColumns_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_1", false);
		start_Hash.put("tFilterColumns_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFilterColumns_1 = 0;
		


 int nb_line_tFilterColumns_1 = 0;
 



/**
 * [tFilterColumns_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;	
				
				char fieldSeparator_tFileInputDelimited_5[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_5[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_5 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_5 = /** Start field tFileInputDelimited_5:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_CUSTOMER.CSV"/** End field tFileInputDelimited_5:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;
	
				try{
					
						String[] rowtFileInputDelimited_5=null;
						int currentLinetFileInputDelimited_5 = 0;
	        			int outputLinetFileInputDelimited_5 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0;
			if(footer_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5)),"UTF-8")), fieldSeparator_tFileInputDelimited_5[0]);
		        			}
					
					
					csvReadertFileInputDelimited_5.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )
	        			csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
	        				csvReadertFileInputDelimited_5.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_5 > 0){
						for(totalLinetFileInputDelimited_5=0;totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++){
							csvReadertFileInputDelimited_5.readNext();
						}
						csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_5.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_5++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5   < 0? 0 : totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5 ;
	            		if(lastLinetFileInputDelimited_5 > 0){
	                		lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5 : lastLineTemptFileInputDelimited_5; 
	            		}else {
	                		lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
	            		}
	         
			          	csvReadertFileInputDelimited_5.close();
				        if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5)),"UTF-8")), fieldSeparator_tFileInputDelimited_5[0]);
						}
						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )	
	        				csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
							csvReadertFileInputDelimited_5.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_5 != 0){
			        	for(currentLinetFileInputDelimited_5=0;currentLinetFileInputDelimited_5 < 1;currentLinetFileInputDelimited_5++){
			        		csvReadertFileInputDelimited_5.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_5 != 0 && csvReadertFileInputDelimited_5!=null && csvReadertFileInputDelimited_5.readNext() ) { 
	        		rowstate_tFileInputDelimited_5.reset();
	        
		        	rowtFileInputDelimited_5=csvReadertFileInputDelimited_5.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_5++;
	            
		            if(lastLinetFileInputDelimited_5 > -1 && currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_5++;
	            	if (limittFileInputDelimited_5 > 0 && outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
	                	break;
	            	}  
	                                                                      
					
	    							row5 = null;			
								
								boolean whetherReject_tFileInputDelimited_5 = false;
								row5 = new row5Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])){//empty line when row separator is '\n'
					
							row5.CustomerID = null;
					
							row5.Title = null;
					
							row5.Suffix = null;
					
							row5.CompanyName = null;
					
							row5.SalesPerson = null;
					
							row5.EmailAddress = null;
					
							row5.PasswordHash = null;
					
							row5.PasswordSalt = null;
					
							row5.rowguid = null;
					
							row5.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_5 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_5 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row5.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row5", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row5.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row5.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.Title = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.Title = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.Suffix = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.Suffix = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.CompanyName = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.CompanyName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.SalesPerson = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.SalesPerson = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.EmailAddress = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.EmailAddress = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.PasswordHash = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.PasswordHash = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.PasswordSalt = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.PasswordSalt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.rowguid = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
											row5.ModifiedDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ModifiedDate", "row5", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row5.ModifiedDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row5.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_5.getException()!=null) {
										throw rowstate_tFileInputDelimited_5.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_5 = true;
        							
                							System.err.println(e.getMessage());
                							row5 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFilterColumns_1 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					
	

	row6.CustomerID = row5.CustomerID;

	
	row6.SalesPerson = row5.SalesPerson;

	
	row6.rowguid = row5.rowguid;

	
	row6.ModifiedDate = row5.ModifiedDate;

	
    nb_line_tFilterColumns_1++;

 


	tos_count_tFilterColumns_1++;

/**
 * [tFilterColumns_1 main ] stop
 */
	
	/**
	 * [tFilterColumns_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(row6.CustomerID != null) {
                        sb_tFileOutputDelimited_5.append(
                            row6.CustomerID
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row6.SalesPerson != null) {
                        sb_tFileOutputDelimited_5.append(
                            row6.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row6.rowguid != null) {
                        sb_tFileOutputDelimited_5.append(
                            row6.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row6.ModifiedDate != null) {
                        sb_tFileOutputDelimited_5.append(
                            FormatterUtils.format_Date(row6.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	


				nb_line_tFileInputDelimited_5++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_5!=null){
    					csvReadertFileInputDelimited_5.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_5!=null){
    				globalMap.put("tFileInputDelimited_5_NB_LINE",nb_line_tFileInputDelimited_5);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tFilterColumns_1 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

globalMap.put("tFilterColumns_1_NB_LINE",nb_line_tFilterColumns_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_1", true);
end_Hash.put("tFilterColumns_1", System.currentTimeMillis());




/**
 * [tFilterColumns_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tFilterColumns_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer AddressID;

				public Integer getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.AddressID = readInteger(dis);
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AddressID,dos);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_ENDERECO.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
                String[] headColutFileOutputDelimited_6=new String[8];
            class CSVBasicSet_tFileOutputDelimited_6{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_6[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_6 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_6[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_6 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_6[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_6[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_6 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 =0;
            int currentRow_tFileOutputDelimited_6 = 0;


            CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
            csvSettings_tFileOutputDelimited_6.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
                            if(fileToDelete_tFileOutputDelimited_6.exists()) {
                                fileToDelete_tFileOutputDelimited_6.delete();
                            }
                            CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "US-ASCII")));
                            CsvWritertFileOutputDelimited_6.setSeparator(csvSettings_tFileOutputDelimited_6.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_6.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_6.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_6.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_6.setLineEnd(""+csvSettings_tFileOutputDelimited_6.getRowDelim());
                    }
                        if(filetFileOutputDelimited_6.length()==0){
                                    headColutFileOutputDelimited_6[0]="AddressID";
                                    headColutFileOutputDelimited_6[1]="AddressLine1";
                                    headColutFileOutputDelimited_6[2]="AddressLine2";
                                    headColutFileOutputDelimited_6[3]="City";
                                    headColutFileOutputDelimited_6[4]="PostalCode";
                                    headColutFileOutputDelimited_6[5]="CountryRegion";
                                    headColutFileOutputDelimited_6[6]="rowguid";
                                    headColutFileOutputDelimited_6[7]="ModifiedDate";
                            CsvWritertFileOutputDelimited_6.writeNext(headColutFileOutputDelimited_6);
                            CsvWritertFileOutputDelimited_6.flush();
                        }
                CsvWritertFileOutputDelimited_6.setEscapeChar(csvSettings_tFileOutputDelimited_6.getEscapeChar());
                CsvWritertFileOutputDelimited_6.setQuoteChar(csvSettings_tFileOutputDelimited_6.getTextEnclosure());
                CsvWritertFileOutputDelimited_6.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_6", CsvWritertFileOutputDelimited_6);
resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;	
				
				char fieldSeparator_tFileInputDelimited_6[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_6[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_6 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_ADDRESS.CSV"/** End field tFileInputDelimited_6:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;
	
				try{
					
						String[] rowtFileInputDelimited_6=null;
						int currentLinetFileInputDelimited_6 = 0;
	        			int outputLinetFileInputDelimited_6 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0;
			if(footer_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"US-ASCII")), fieldSeparator_tFileInputDelimited_6[0]);
		        			}
					
					
					csvReadertFileInputDelimited_6.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )
	        			csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
	        				csvReadertFileInputDelimited_6.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_6 > 0){
						for(totalLinetFileInputDelimited_6=0;totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++){
							csvReadertFileInputDelimited_6.readNext();
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_6.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_6++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6   < 0? 0 : totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6 ;
	            		if(lastLinetFileInputDelimited_6 > 0){
	                		lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6 : lastLineTemptFileInputDelimited_6; 
	            		}else {
	                		lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
	            		}
	         
			          	csvReadertFileInputDelimited_6.close();
				        if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"US-ASCII")), fieldSeparator_tFileInputDelimited_6[0]);
						}
						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )	
	        				csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
							csvReadertFileInputDelimited_6.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_6 != 0){
			        	for(currentLinetFileInputDelimited_6=0;currentLinetFileInputDelimited_6 < 1;currentLinetFileInputDelimited_6++){
			        		csvReadertFileInputDelimited_6.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6!=null && csvReadertFileInputDelimited_6.readNext() ) { 
	        		rowstate_tFileInputDelimited_6.reset();
	        
		        	rowtFileInputDelimited_6=csvReadertFileInputDelimited_6.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_6++;
	            
		            if(lastLinetFileInputDelimited_6 > -1 && currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_6++;
	            	if (limittFileInputDelimited_6 > 0 && outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
	                	break;
	            	}  
	                                                                      
					
	    							row7 = null;			
								
								boolean whetherReject_tFileInputDelimited_6 = false;
								row7 = new row7Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])){//empty line when row separator is '\n'
					
							row7.AddressID = null;
					
							row7.AddressLine1 = null;
					
							row7.AddressLine2 = null;
					
							row7.City = null;
					
							row7.PostalCode = null;
					
							row7.CountryRegion = null;
					
							row7.rowguid = null;
					
							row7.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_6 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_6 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
										row7.AddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AddressID", "row7", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row7.AddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row7.AddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.AddressLine1 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.AddressLine1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.AddressLine2 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.AddressLine2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.City = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.City = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.PostalCode = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.PostalCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.CountryRegion = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.CountryRegion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.rowguid = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row7.ModifiedDate = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row7.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_6.getException()!=null) {
										throw rowstate_tFileInputDelimited_6.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_6 = true;
        							
                							System.err.println(e.getMessage());
                							row7 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


                        String[] rowtFileOutputDelimited_6=new String[8];
                            rowtFileOutputDelimited_6[0]=row7.AddressID == null ? null : String.valueOf(row7.AddressID);
                            rowtFileOutputDelimited_6[1]=row7.AddressLine1 == null ? null : row7.AddressLine1;
                            rowtFileOutputDelimited_6[2]=row7.AddressLine2 == null ? null : row7.AddressLine2;
                            rowtFileOutputDelimited_6[3]=row7.City == null ? null : row7.City;
                            rowtFileOutputDelimited_6[4]=row7.PostalCode == null ? null : row7.PostalCode;
                            rowtFileOutputDelimited_6[5]=row7.CountryRegion == null ? null : row7.CountryRegion;
                            rowtFileOutputDelimited_6[6]=row7.rowguid == null ? null : row7.rowguid;
                            rowtFileOutputDelimited_6[7]=row7.ModifiedDate == null ? null : row7.ModifiedDate;
                nb_line_tFileOutputDelimited_6++;
                resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
                                       CsvWritertFileOutputDelimited_6.writeNext(rowtFileOutputDelimited_6);




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	


				nb_line_tFileInputDelimited_6++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_6!=null){
    					csvReadertFileInputDelimited_6.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_6!=null){
    				globalMap.put("tFileInputDelimited_6_NB_LINE",nb_line_tFileInputDelimited_6);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_6!=null) {
				    	CsvWritertFileOutputDelimited_6.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_6");
					
						if(CsvWritertFileOutputDelimited_6!=null) {
					    	CsvWritertFileOutputDelimited_6.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.CompanyName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",CompanyName="+CompanyName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DATA_OPS_HAR = new byte[0];
    static byte[] commonByteArray_DATA_OPS_HAR = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_OPS_HAR.length) {
				if(length < 1024 && commonByteArray_DATA_OPS_HAR.length == 0) {
   					commonByteArray_DATA_OPS_HAR = new byte[1024];
				} else {
   					commonByteArray_DATA_OPS_HAR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_OPS_HAR, 0, length);
			strReturn = new String(commonByteArray_DATA_OPS_HAR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_OPS_HAR) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Title="+Title);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();





	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File("D:/DATA_OPS_PROJETO/HARMONIZED/STG_LOJA.CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 = 0;
            int currentRow_tFileOutputDelimited_7 = 0;

            final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_7 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
                        if(fileToDelete_tFileOutputDelimited_7.exists()) {
                            fileToDelete_tFileOutputDelimited_7.delete();
                        }
                        outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_7.length()==0){
                                        outtFileOutputDelimited_7.write("CustomerID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("CompanyName");
                                        outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */



	
	/**
	 * [tFilterColumns_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_2", false);
		start_Hash.put("tFilterColumns_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFilterColumns_2 = 0;
		


 int nb_line_tFilterColumns_2 = 0;
 



/**
 * [tFilterColumns_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;	
				
				char fieldSeparator_tFileInputDelimited_7[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_7[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_7 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_7 = /** Start field tFileInputDelimited_7:FILENAME */"D:/DATA_OPS_PROJETO/RAW/FF_CUSTOMER.CSV"/** End field tFileInputDelimited_7:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;
	
				try{
					
						String[] rowtFileInputDelimited_7=null;
						int currentLinetFileInputDelimited_7 = 0;
	        			int outputLinetFileInputDelimited_7 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0;
			if(footer_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"UTF-8")), fieldSeparator_tFileInputDelimited_7[0]);
		        			}
					
					
					csvReadertFileInputDelimited_7.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )
	        			csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
	        				csvReadertFileInputDelimited_7.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_7 > 0){
						for(totalLinetFileInputDelimited_7=0;totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++){
							csvReadertFileInputDelimited_7.readNext();
						}
						csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_7.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_7++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7   < 0? 0 : totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7 ;
	            		if(lastLinetFileInputDelimited_7 > 0){
	                		lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7 : lastLineTemptFileInputDelimited_7; 
	            		}else {
	                		lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
	            		}
	         
			          	csvReadertFileInputDelimited_7.close();
				        if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"UTF-8")), fieldSeparator_tFileInputDelimited_7[0]);
						}
						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )	
	        				csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
							csvReadertFileInputDelimited_7.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_7 != 0){
			        	for(currentLinetFileInputDelimited_7=0;currentLinetFileInputDelimited_7 < 1;currentLinetFileInputDelimited_7++){
			        		csvReadertFileInputDelimited_7.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_7 != 0 && csvReadertFileInputDelimited_7!=null && csvReadertFileInputDelimited_7.readNext() ) { 
	        		rowstate_tFileInputDelimited_7.reset();
	        
		        	rowtFileInputDelimited_7=csvReadertFileInputDelimited_7.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_7++;
	            
		            if(lastLinetFileInputDelimited_7 > -1 && currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_7++;
	            	if (limittFileInputDelimited_7 > 0 && outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
	                	break;
	            	}  
	                                                                      
					
	    							row8 = null;			
								
								boolean whetherReject_tFileInputDelimited_7 = false;
								row8 = new row8Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_7.length == 1 && ("\015").equals(rowtFileInputDelimited_7[0])){//empty line when row separator is '\n'
					
							row8.CustomerID = null;
					
							row8.Title = null;
					
							row8.Suffix = null;
					
							row8.CompanyName = null;
					
							row8.SalesPerson = null;
					
							row8.EmailAddress = null;
					
							row8.PasswordHash = null;
					
							row8.PasswordSalt = null;
					
							row8.rowguid = null;
					
							row8.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_7 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_7 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
								
									if(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {
									
										row8.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_7) {
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row8", rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7], ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
										}
    								}else{
    									
											
												row8.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row8.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.Title = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.Title = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.Suffix = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.Suffix = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.CompanyName = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.CompanyName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.SalesPerson = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.SalesPerson = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.EmailAddress = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.EmailAddress = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.PasswordHash = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.PasswordHash = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.PasswordSalt = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.PasswordSalt = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row8.rowguid = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row8.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
								
									if(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {
									
											row8.ModifiedDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_7) {
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ModifiedDate", "row8", rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7], ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
										}
    								}else{
    									
											
												row8.ModifiedDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row8.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_7.getException()!=null) {
										throw rowstate_tFileInputDelimited_7.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_7 = true;
        							
                							System.err.println(e.getMessage());
                							row8 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFilterColumns_2 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
	

	row9.CustomerID = row8.CustomerID;

	
	row9.CompanyName = row8.CompanyName;

	
    nb_line_tFilterColumns_2++;

 


	tos_count_tFilterColumns_2++;

/**
 * [tFilterColumns_2 main ] stop
 */
	
	/**
	 * [tFilterColumns_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


                    StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
                            if(row9.CustomerID != null) {
                        sb_tFileOutputDelimited_7.append(
                            row9.CustomerID
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(row9.CompanyName != null) {
                        sb_tFileOutputDelimited_7.append(
                            row9.CompanyName
                        );
                            }
                    sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);


                    nb_line_tFileOutputDelimited_7++;
                    resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

                        outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	


				nb_line_tFileInputDelimited_7++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_7!=null){
    					csvReadertFileInputDelimited_7.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_7!=null){
    				globalMap.put("tFileInputDelimited_7_NB_LINE",nb_line_tFileInputDelimited_7);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tFilterColumns_2 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

globalMap.put("tFilterColumns_2_NB_LINE",nb_line_tFilterColumns_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_2", true);
end_Hash.put("tFilterColumns_2", System.currentTimeMillis());




/**
 * [tFilterColumns_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	



		
			
					if(outtFileOutputDelimited_7!=null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
				
				globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tFilterColumns_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_7");
						if(outtFileOutputDelimited_7!=null) {
							outtFileOutputDelimited_7.flush();
							outtFileOutputDelimited_7.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HAR HARClass = new HAR();

        int exitCode = HARClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HAR.class.getClassLoader().getResourceAsStream("data_ops/har_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HAR.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_3.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_4.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_5.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_6.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_7.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HAR");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     303044 characters generated by Talend Open Studio for Big Data 
 *     on the 2 de Maio de 2021 14h51min53s BRT
 ************************************************************************************************/